/* eslint-disable */
/* THIS FILE HAS BEEN AUTOGENERATED. DO NOT EDIT. */
export type Maybe<T> = T;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** The `DateTime` scalar type represents a point in time. */
  DateTime: any;
  /** The `Number` scalar type represents a number that can be a float, an integer or a null value. */
  Number: any;
  /** The `QueryArgument` scalar type represents a value to be using in Craft element queries. It can be an integer, a string, or a boolean value. */
  QueryArgument: any;
};





export type AssetCriteriaInput = {
  /** Narrows the query results based on the elements’ IDs. */
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  /** Narrows the query results based on the elements’ UIDs. */
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Determines which site(s) the elements should be queried in. Defaults to the current (requested) site. */
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Determines which site(s) the elements should be queried in. Defaults to the current (requested) site. */
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  /** Determines whether only elements with unique IDs should be returned by the query. */
  unique?: Maybe<Scalars['Boolean']>;
  /** Determines which site should be selected when querying multi-site elements. */
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  /** Narrows the query results based on whether the elements are enabled in the site they’re being queried in, per the `site` argument. */
  enabledForSite?: Maybe<Scalars['Boolean']>;
  /** Narrows the query results based on the elements’ titles. */
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Narrows the query results based on the elements’ slugs. */
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Narrows the query results based on the elements’ URIs. */
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Narrows the query results to only elements that match a search query. */
  search?: Maybe<Scalars['String']>;
  /** Narrows the query results to elements that relate to the provided element IDs. This argument is ignored, if `relatedToAll` is also used. */
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  /** Narrows the query results to elements that relate to an asset list defined with this argument. */
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  /** Narrows the query results to elements that relate to an entry list defined with this argument. */
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  /** Narrows the query results to elements that relate to a use list defined with this argument. */
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  /** Narrows the query results to elements that relate to a category list defined with this argument. */
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  /** Narrows the query results to elements that relate to a tag list defined with this argument. */
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  /** Narrows the query results to elements that relate to *all* of the provided element IDs. Using this argument will cause `relatedTo` argument to be ignored. **This argument is deprecated.** `relatedTo: ["and", ...ids]` should be used instead. */
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  /** Narrows the query results based on a reference string. */
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Causes the query results to be returned in the order specified by the `id` argument. */
  fixedOrder?: Maybe<Scalars['Boolean']>;
  /** Causes the query results to be returned in reverse order. */
  inReverse?: Maybe<Scalars['Boolean']>;
  /** Narrows the query results based on the elements’ creation dates. */
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Narrows the query results based on the elements’ last-updated dates. */
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Sets the offset for paginated results. */
  offset?: Maybe<Scalars['Int']>;
  /** Sets the limit for paginated results. */
  limit?: Maybe<Scalars['Int']>;
  /** Sets the field the returned elements should be ordered by. */
  orderBy?: Maybe<Scalars['String']>;
  /** Narrows the query results based on the unique identifier for an element-site relation. */
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  /** Narrows the query results based on the volumes the assets belong to, per the volumes’ IDs. */
  volumeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  /** Narrows the query results based on the volumes the assets belong to, per the volumes’ handles. */
  volume?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Narrows the query results based on the folders the assets belong to, per the folders’ IDs. */
  folderId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  /** Narrows the query results based on the assets’ filenames. */
  filename?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Narrows the query results based on the assets’ file kinds. */
  kind?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Narrows the query results based on the assets’ image heights. */
  height?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Narrows the query results based on the assets’ image widths. */
  width?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Narrows the query results based on the assets’ file sizes (in bytes). */
  size?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Narrows the query results based on the assets’ files’ last-modified dates. */
  dateModified?: Maybe<Scalars['String']>;
  /** Broadens the query results to include assets from any of the subfolders of the folder specified by `folderId`. */
  includeSubfolders?: Maybe<Scalars['Boolean']>;
  /** A list of transform handles to preload. */
  withTransforms?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Narrows the query results based on the user the assets were uploaded by, per the user’s ID. */
  uploader?: Maybe<Scalars['QueryArgument']>;
};

/** This is the interface implemented by all assets. */
export type AssetInterface = {
  /** The id of the entity */
  id?: Maybe<Scalars['ID']>;
  /** The uid of the entity */
  uid?: Maybe<Scalars['String']>;
  /** Return a number of related elements for a field. */
  _count?: Maybe<Scalars['Int']>;
  /** The element’s title. */
  title?: Maybe<Scalars['String']>;
  /** The element’s slug. */
  slug?: Maybe<Scalars['String']>;
  /** The element’s URI. */
  uri?: Maybe<Scalars['String']>;
  /** Whether the element is enabled or not. */
  enabled?: Maybe<Scalars['Boolean']>;
  /** Whether the element is archived or not. */
  archived?: Maybe<Scalars['Boolean']>;
  /** The ID of the site the element is associated with. */
  siteId?: Maybe<Scalars['Int']>;
  /** The unique identifier for an element-site relation. */
  siteSettingsId?: Maybe<Scalars['ID']>;
  /** The language of the site element is associated with. */
  language?: Maybe<Scalars['String']>;
  /** The element’s search score, if the `search` parameter was used when querying for the element. */
  searchScore?: Maybe<Scalars['String']>;
  /** Whether the element has been soft-deleted or not. */
  trashed?: Maybe<Scalars['Boolean']>;
  /** The element's status. */
  status?: Maybe<Scalars['String']>;
  /** The date the element was created. */
  dateCreated?: Maybe<Scalars['DateTime']>;
  /** The date the element was last updated. */
  dateUpdated?: Maybe<Scalars['DateTime']>;
  /** The ID of the volume that the asset belongs to. */
  volumeId?: Maybe<Scalars['Int']>;
  /** The ID of the folder that the asset belongs to. */
  folderId?: Maybe<Scalars['Int']>;
  /** The filename of the asset file. */
  filename?: Maybe<Scalars['String']>;
  /** The file extension for the asset file. */
  extension?: Maybe<Scalars['String']>;
  /** Whether a user-defined focal point is set on the asset. */
  hasFocalPoint?: Maybe<Scalars['Boolean']>;
  /** The focal point represented as an array with `x` and `y` keys, or null if it's not an image. */
  focalPoint?: Maybe<Array<Maybe<Scalars['Float']>>>;
  /** The file kind. */
  kind?: Maybe<Scalars['String']>;
  /** The file size in bytes. */
  size?: Maybe<Scalars['String']>;
  /** The height in pixels or null if it's not an image. */
  height?: Maybe<Scalars['Int']>;
  /** The width in pixels or null if it's not an image. */
  width?: Maybe<Scalars['Int']>;
  /** An `<img>` tag based on this asset. */
  img?: Maybe<Scalars['String']>;
  /** Returns a `srcset` attribute value based on the given widths or x-descriptors. */
  srcset?: Maybe<Scalars['String']>;
  /** The full URL of the asset. This field accepts the same fields as the `transform` directive. */
  url?: Maybe<Scalars['String']>;
  /** The file’s MIME type, if it can be determined. */
  mimeType?: Maybe<Scalars['String']>;
  /** The asset's path in the volume. */
  path?: Maybe<Scalars['String']>;
  /** The date the asset file was last modified. */
  dateModified?: Maybe<Scalars['DateTime']>;
  /** Returns the previous element relative to this one, from a given set of criteria. */
  prev?: Maybe<AssetInterface>;
  /** Returns the next element relative to this one, from a given set of criteria. */
  next?: Maybe<AssetInterface>;
};


/** This is the interface implemented by all assets. */
export type AssetInterface_CountArgs = {
  field: Scalars['String'];
};


/** This is the interface implemented by all assets. */
export type AssetInterfaceHeightArgs = {
  handle?: Maybe<Scalars['String']>;
  transform?: Maybe<Scalars['String']>;
  width?: Maybe<Scalars['Int']>;
  height?: Maybe<Scalars['Int']>;
  mode?: Maybe<Scalars['String']>;
  position?: Maybe<Scalars['String']>;
  interlace?: Maybe<Scalars['String']>;
  quality?: Maybe<Scalars['Int']>;
  format?: Maybe<Scalars['String']>;
  immediately?: Maybe<Scalars['Boolean']>;
};


/** This is the interface implemented by all assets. */
export type AssetInterfaceWidthArgs = {
  handle?: Maybe<Scalars['String']>;
  transform?: Maybe<Scalars['String']>;
  width?: Maybe<Scalars['Int']>;
  height?: Maybe<Scalars['Int']>;
  mode?: Maybe<Scalars['String']>;
  position?: Maybe<Scalars['String']>;
  interlace?: Maybe<Scalars['String']>;
  quality?: Maybe<Scalars['Int']>;
  format?: Maybe<Scalars['String']>;
  immediately?: Maybe<Scalars['Boolean']>;
};


/** This is the interface implemented by all assets. */
export type AssetInterfaceSrcsetArgs = {
  sizes: Array<Scalars['String']>;
};


/** This is the interface implemented by all assets. */
export type AssetInterfaceUrlArgs = {
  handle?: Maybe<Scalars['String']>;
  transform?: Maybe<Scalars['String']>;
  width?: Maybe<Scalars['Int']>;
  height?: Maybe<Scalars['Int']>;
  mode?: Maybe<Scalars['String']>;
  position?: Maybe<Scalars['String']>;
  interlace?: Maybe<Scalars['String']>;
  quality?: Maybe<Scalars['Int']>;
  format?: Maybe<Scalars['String']>;
  immediately?: Maybe<Scalars['Boolean']>;
};


/** This is the interface implemented by all assets. */
export type AssetInterfacePrevArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  volumeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  volume?: Maybe<Array<Maybe<Scalars['String']>>>;
  folderId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  filename?: Maybe<Array<Maybe<Scalars['String']>>>;
  kind?: Maybe<Array<Maybe<Scalars['String']>>>;
  height?: Maybe<Array<Maybe<Scalars['String']>>>;
  width?: Maybe<Array<Maybe<Scalars['String']>>>;
  size?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateModified?: Maybe<Scalars['String']>;
  includeSubfolders?: Maybe<Scalars['Boolean']>;
  withTransforms?: Maybe<Array<Maybe<Scalars['String']>>>;
  uploader?: Maybe<Scalars['QueryArgument']>;
};


/** This is the interface implemented by all assets. */
export type AssetInterfaceNextArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  volumeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  volume?: Maybe<Array<Maybe<Scalars['String']>>>;
  folderId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  filename?: Maybe<Array<Maybe<Scalars['String']>>>;
  kind?: Maybe<Array<Maybe<Scalars['String']>>>;
  height?: Maybe<Array<Maybe<Scalars['String']>>>;
  width?: Maybe<Array<Maybe<Scalars['String']>>>;
  size?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateModified?: Maybe<Scalars['String']>;
  includeSubfolders?: Maybe<Scalars['Boolean']>;
  withTransforms?: Maybe<Array<Maybe<Scalars['String']>>>;
  uploader?: Maybe<Scalars['QueryArgument']>;
};

export type CategoryCriteriaInput = {
  /** Narrows the query results based on the elements’ IDs. */
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  /** Narrows the query results based on the elements’ UIDs. */
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Determines which site(s) the elements should be queried in. Defaults to the current (requested) site. */
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Determines which site(s) the elements should be queried in. Defaults to the current (requested) site. */
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  /** Determines whether only elements with unique IDs should be returned by the query. */
  unique?: Maybe<Scalars['Boolean']>;
  /** Determines which site should be selected when querying multi-site elements. */
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  /** Narrows the query results based on whether the elements are enabled in the site they’re being queried in, per the `site` argument. */
  enabledForSite?: Maybe<Scalars['Boolean']>;
  /** Narrows the query results based on the elements’ titles. */
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Narrows the query results based on the elements’ slugs. */
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Narrows the query results based on the elements’ URIs. */
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Narrows the query results to only elements that match a search query. */
  search?: Maybe<Scalars['String']>;
  /** Narrows the query results to elements that relate to the provided element IDs. This argument is ignored, if `relatedToAll` is also used. */
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  /** Narrows the query results to elements that relate to an asset list defined with this argument. */
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  /** Narrows the query results to elements that relate to an entry list defined with this argument. */
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  /** Narrows the query results to elements that relate to a use list defined with this argument. */
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  /** Narrows the query results to elements that relate to a category list defined with this argument. */
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  /** Narrows the query results to elements that relate to a tag list defined with this argument. */
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  /** Narrows the query results to elements that relate to *all* of the provided element IDs. Using this argument will cause `relatedTo` argument to be ignored. **This argument is deprecated.** `relatedTo: ["and", ...ids]` should be used instead. */
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  /** Narrows the query results based on a reference string. */
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Causes the query results to be returned in the order specified by the `id` argument. */
  fixedOrder?: Maybe<Scalars['Boolean']>;
  /** Causes the query results to be returned in reverse order. */
  inReverse?: Maybe<Scalars['Boolean']>;
  /** Narrows the query results based on the elements’ creation dates. */
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Narrows the query results based on the elements’ last-updated dates. */
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Sets the offset for paginated results. */
  offset?: Maybe<Scalars['Int']>;
  /** Sets the limit for paginated results. */
  limit?: Maybe<Scalars['Int']>;
  /** Sets the field the returned elements should be ordered by. */
  orderBy?: Maybe<Scalars['String']>;
  /** Narrows the query results based on the unique identifier for an element-site relation. */
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  /** Explicitly determines whether the query should join in the structure data. */
  withStructure?: Maybe<Scalars['Boolean']>;
  /** Determines which structure data should be joined into the query. */
  structureId?: Maybe<Scalars['Int']>;
  /** Narrows the query results based on the elements’ level within the structure. */
  level?: Maybe<Scalars['Int']>;
  /** Narrows the query results based on whether the elements have any descendants in their structure. */
  hasDescendants?: Maybe<Scalars['Boolean']>;
  /** Narrows the query results to only elements that are ancestors of another element in its structure, provided by its ID. */
  ancestorOf?: Maybe<Scalars['Int']>;
  /** Narrows the query results to only elements that are up to a certain distance away from the element in its structure specified by `ancestorOf`. */
  ancestorDist?: Maybe<Scalars['Int']>;
  /** Narrows the query results to only elements that are descendants of another element in its structure provided by its ID. */
  descendantOf?: Maybe<Scalars['Int']>;
  /** Narrows the query results to only elements that are up to a certain distance away from the element in its structure specified by `descendantOf`. */
  descendantDist?: Maybe<Scalars['Int']>;
  /** Narrows the query results based on whether the elements are “leaves” in their structure (element with no descendants). */
  leaves?: Maybe<Scalars['Boolean']>;
  /** Narrows the query results to only the entry that comes immediately after another element in its structure, provided by its ID. */
  nextSiblingOf?: Maybe<Scalars['Int']>;
  /** Narrows the query results to only the entry that comes immediately before another element in its structure, provided by its ID. */
  prevSiblingOf?: Maybe<Scalars['Int']>;
  /** Narrows the query results to only entries that are positioned after another element in its structure, provided by its ID. */
  positionedAfter?: Maybe<Scalars['Int']>;
  /** Narrows the query results to only entries that are positioned before another element in its structure, provided by its ID. */
  positionedBefore?: Maybe<Scalars['Int']>;
  /** Whether to only return categories that the user has permission to edit. */
  editable?: Maybe<Scalars['Boolean']>;
  /** Narrows the query results based on the category groups the categories belong to per the group’s handles. */
  group?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Narrows the query results based on the category groups the categories belong to, per the groups’ IDs. */
  groupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
};


export type Element = ElementInterface & {
  /** The id of the entity */
  id?: Maybe<Scalars['ID']>;
  /** The uid of the entity */
  uid?: Maybe<Scalars['String']>;
  /** Return a number of related elements for a field. */
  _count?: Maybe<Scalars['Int']>;
  /** The element’s title. */
  title?: Maybe<Scalars['String']>;
  /** The element’s slug. */
  slug?: Maybe<Scalars['String']>;
  /** The element’s URI. */
  uri?: Maybe<Scalars['String']>;
  /** Whether the element is enabled or not. */
  enabled?: Maybe<Scalars['Boolean']>;
  /** Whether the element is archived or not. */
  archived?: Maybe<Scalars['Boolean']>;
  /** The ID of the site the element is associated with. */
  siteId?: Maybe<Scalars['Int']>;
  /** The unique identifier for an element-site relation. */
  siteSettingsId?: Maybe<Scalars['ID']>;
  /** The language of the site element is associated with. */
  language?: Maybe<Scalars['String']>;
  /** The element’s search score, if the `search` parameter was used when querying for the element. */
  searchScore?: Maybe<Scalars['String']>;
  /** Whether the element has been soft-deleted or not. */
  trashed?: Maybe<Scalars['Boolean']>;
  /** The element's status. */
  status?: Maybe<Scalars['String']>;
  /** The date the element was created. */
  dateCreated?: Maybe<Scalars['DateTime']>;
  /** The date the element was last updated. */
  dateUpdated?: Maybe<Scalars['DateTime']>;
};


export type Element_CountArgs = {
  field: Scalars['String'];
};

/** This is the interface implemented by all elements. */
export type ElementInterface = {
  /** The id of the entity */
  id?: Maybe<Scalars['ID']>;
  /** The uid of the entity */
  uid?: Maybe<Scalars['String']>;
  /** Return a number of related elements for a field. */
  _count?: Maybe<Scalars['Int']>;
  /** The element’s title. */
  title?: Maybe<Scalars['String']>;
  /** The element’s slug. */
  slug?: Maybe<Scalars['String']>;
  /** The element’s URI. */
  uri?: Maybe<Scalars['String']>;
  /** Whether the element is enabled or not. */
  enabled?: Maybe<Scalars['Boolean']>;
  /** Whether the element is archived or not. */
  archived?: Maybe<Scalars['Boolean']>;
  /** The ID of the site the element is associated with. */
  siteId?: Maybe<Scalars['Int']>;
  /** The unique identifier for an element-site relation. */
  siteSettingsId?: Maybe<Scalars['ID']>;
  /** The language of the site element is associated with. */
  language?: Maybe<Scalars['String']>;
  /** The element’s search score, if the `search` parameter was used when querying for the element. */
  searchScore?: Maybe<Scalars['String']>;
  /** Whether the element has been soft-deleted or not. */
  trashed?: Maybe<Scalars['Boolean']>;
  /** The element's status. */
  status?: Maybe<Scalars['String']>;
  /** The date the element was created. */
  dateCreated?: Maybe<Scalars['DateTime']>;
  /** The date the element was last updated. */
  dateUpdated?: Maybe<Scalars['DateTime']>;
};


/** This is the interface implemented by all elements. */
export type ElementInterface_CountArgs = {
  field: Scalars['String'];
};

export type EntryCriteriaInput = {
  /** Narrows the query results based on the elements’ IDs. */
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  /** Narrows the query results based on the elements’ UIDs. */
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Determines which site(s) the elements should be queried in. Defaults to the current (requested) site. */
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Determines which site(s) the elements should be queried in. Defaults to the current (requested) site. */
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  /** Determines whether only elements with unique IDs should be returned by the query. */
  unique?: Maybe<Scalars['Boolean']>;
  /** Determines which site should be selected when querying multi-site elements. */
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  /** Narrows the query results based on whether the elements are enabled in the site they’re being queried in, per the `site` argument. */
  enabledForSite?: Maybe<Scalars['Boolean']>;
  /** Narrows the query results based on the elements’ titles. */
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Narrows the query results based on the elements’ slugs. */
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Narrows the query results based on the elements’ URIs. */
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Narrows the query results to only elements that match a search query. */
  search?: Maybe<Scalars['String']>;
  /** Narrows the query results to elements that relate to the provided element IDs. This argument is ignored, if `relatedToAll` is also used. */
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  /** Narrows the query results to elements that relate to an asset list defined with this argument. */
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  /** Narrows the query results to elements that relate to an entry list defined with this argument. */
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  /** Narrows the query results to elements that relate to a use list defined with this argument. */
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  /** Narrows the query results to elements that relate to a category list defined with this argument. */
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  /** Narrows the query results to elements that relate to a tag list defined with this argument. */
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  /** Narrows the query results to elements that relate to *all* of the provided element IDs. Using this argument will cause `relatedTo` argument to be ignored. **This argument is deprecated.** `relatedTo: ["and", ...ids]` should be used instead. */
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  /** Narrows the query results based on a reference string. */
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Causes the query results to be returned in the order specified by the `id` argument. */
  fixedOrder?: Maybe<Scalars['Boolean']>;
  /** Causes the query results to be returned in reverse order. */
  inReverse?: Maybe<Scalars['Boolean']>;
  /** Narrows the query results based on the elements’ creation dates. */
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Narrows the query results based on the elements’ last-updated dates. */
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Sets the offset for paginated results. */
  offset?: Maybe<Scalars['Int']>;
  /** Sets the limit for paginated results. */
  limit?: Maybe<Scalars['Int']>;
  /** Sets the field the returned elements should be ordered by. */
  orderBy?: Maybe<Scalars['String']>;
  /** Narrows the query results based on the unique identifier for an element-site relation. */
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  /** Explicitly determines whether the query should join in the structure data. */
  withStructure?: Maybe<Scalars['Boolean']>;
  /** Determines which structure data should be joined into the query. */
  structureId?: Maybe<Scalars['Int']>;
  /** Narrows the query results based on the elements’ level within the structure. */
  level?: Maybe<Scalars['Int']>;
  /** Narrows the query results based on whether the elements have any descendants in their structure. */
  hasDescendants?: Maybe<Scalars['Boolean']>;
  /** Narrows the query results to only elements that are ancestors of another element in its structure, provided by its ID. */
  ancestorOf?: Maybe<Scalars['Int']>;
  /** Narrows the query results to only elements that are up to a certain distance away from the element in its structure specified by `ancestorOf`. */
  ancestorDist?: Maybe<Scalars['Int']>;
  /** Narrows the query results to only elements that are descendants of another element in its structure provided by its ID. */
  descendantOf?: Maybe<Scalars['Int']>;
  /** Narrows the query results to only elements that are up to a certain distance away from the element in its structure specified by `descendantOf`. */
  descendantDist?: Maybe<Scalars['Int']>;
  /** Narrows the query results based on whether the elements are “leaves” in their structure (element with no descendants). */
  leaves?: Maybe<Scalars['Boolean']>;
  /** Narrows the query results to only the entry that comes immediately after another element in its structure, provided by its ID. */
  nextSiblingOf?: Maybe<Scalars['Int']>;
  /** Narrows the query results to only the entry that comes immediately before another element in its structure, provided by its ID. */
  prevSiblingOf?: Maybe<Scalars['Int']>;
  /** Narrows the query results to only entries that are positioned after another element in its structure, provided by its ID. */
  positionedAfter?: Maybe<Scalars['Int']>;
  /** Narrows the query results to only entries that are positioned before another element in its structure, provided by its ID. */
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  /** Whether to only return entries that the user has permission to edit. */
  editable?: Maybe<Scalars['Boolean']>;
  /** Narrows the query results based on the section handles the entries belong to. */
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Narrows the query results based on the sections the entries belong to, per the sections’ IDs. */
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  /** Narrows the query results based on the entries’ entry type handles. */
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Narrows the query results based on the entries’ entry types, per the types’ IDs. */
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  /** Narrows the query results based on the entries’ authors. */
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  /** Narrows the query results based on the user group the entries’ authors belong to. */
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Narrows the query results based on the user group the entries’ authors belong to, per the groups’ IDs. */
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  /** Narrows the query results based on the entries’ post dates. */
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Narrows the query results to only entries that were posted before a certain date. */
  before?: Maybe<Scalars['String']>;
  /** Narrows the query results to only entries that were posted on or after a certain date. */
  after?: Maybe<Scalars['String']>;
  /** Narrows the query results based on the entries’ expiry dates. */
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};

/** This is the interface implemented by all entries. */
export type EntryInterface = {
  /** The id of the entity */
  id?: Maybe<Scalars['ID']>;
  /** The uid of the entity */
  uid?: Maybe<Scalars['String']>;
  /** Return a number of related elements for a field. */
  _count?: Maybe<Scalars['Int']>;
  /** The element’s title. */
  title?: Maybe<Scalars['String']>;
  /** The element’s slug. */
  slug?: Maybe<Scalars['String']>;
  /** The element’s URI. */
  uri?: Maybe<Scalars['String']>;
  /** Whether the element is enabled or not. */
  enabled?: Maybe<Scalars['Boolean']>;
  /** Whether the element is archived or not. */
  archived?: Maybe<Scalars['Boolean']>;
  /** The ID of the site the element is associated with. */
  siteId?: Maybe<Scalars['Int']>;
  /** The unique identifier for an element-site relation. */
  siteSettingsId?: Maybe<Scalars['ID']>;
  /** The language of the site element is associated with. */
  language?: Maybe<Scalars['String']>;
  /** The element’s search score, if the `search` parameter was used when querying for the element. */
  searchScore?: Maybe<Scalars['String']>;
  /** Whether the element has been soft-deleted or not. */
  trashed?: Maybe<Scalars['Boolean']>;
  /** The element's status. */
  status?: Maybe<Scalars['String']>;
  /** The date the element was created. */
  dateCreated?: Maybe<Scalars['DateTime']>;
  /** The date the element was last updated. */
  dateUpdated?: Maybe<Scalars['DateTime']>;
  /** The element’s left position within its structure. */
  lft?: Maybe<Scalars['Int']>;
  /** The element’s right position within its structure. */
  rgt?: Maybe<Scalars['Int']>;
  /** The element’s level within its structure */
  level?: Maybe<Scalars['Int']>;
  /** The element’s structure’s root ID */
  root?: Maybe<Scalars['Int']>;
  /** The element’s structure ID. */
  structureId?: Maybe<Scalars['Int']>;
  /** Returns whether this is a draft. */
  isDraft?: Maybe<Scalars['Boolean']>;
  /** Returns whether this is a revision. */
  isRevision?: Maybe<Scalars['Boolean']>;
  /** The ID of the draft to return (from the `drafts` table) */
  draftId?: Maybe<Scalars['Int']>;
  /** Returns whether this is an unpublished draft. */
  isUnpublishedDraft?: Maybe<Scalars['Boolean']>;
  /** Returns whether this is an unpublished draft. **This field is deprecated.** `isUnpublishedDraft` should be used instead. */
  isUnsavedDraft?: Maybe<Scalars['Boolean']>;
  /** The name of the draft. */
  draftName?: Maybe<Scalars['String']>;
  /** The notes for the draft. */
  draftNotes?: Maybe<Scalars['String']>;
  /** Returns the entry’s canonical ID. */
  canonicalId?: Maybe<Scalars['Int']>;
  /** Returns the entry’s canonical UUID. */
  canonicalUid?: Maybe<Scalars['String']>;
  /**
   * Returns the entry’s canonical ID.
   * @deprecated this field has been deprecated since Craft 3.7.7. Use `canonicalId` instead.
   */
  sourceId?: Maybe<Scalars['Int']>;
  /**
   * Returns the entry’s canonical UUID.
   * @deprecated this field has been deprecated since Craft 3.7.7. Use `canonicalUid` instead.
   */
  sourceUid?: Maybe<Scalars['String']>;
  /** The ID of the section that contains the entry. */
  sectionId?: Maybe<Scalars['Int']>;
  /** The handle of the section that contains the entry. */
  sectionHandle?: Maybe<Scalars['String']>;
  /** The ID of the entry type that contains the entry. */
  typeId?: Maybe<Scalars['Int']>;
  /** The handle of the entry type that contains the entry. */
  typeHandle?: Maybe<Scalars['String']>;
  /** The entry's post date. */
  postDate?: Maybe<Scalars['DateTime']>;
  /** The expiry date of the entry. */
  expiryDate?: Maybe<Scalars['DateTime']>;
  /** The entry’s children, if the section is a structure. Accepts the same arguments as the `entries` query. */
  children?: Maybe<Array<Maybe<EntryInterface>>>;
  /** The entry’s descendants, if the section is a structure. Accepts the same arguments as the `entries` query. */
  descendants?: Maybe<Array<Maybe<EntryInterface>>>;
  /** The entry’s parent, if the section is a structure. */
  parent?: Maybe<EntryInterface>;
  /** The entry’s ancestors, if the section is a structure. Accepts the same arguments as the `entries` query. */
  ancestors?: Maybe<Array<Maybe<EntryInterface>>>;
  /** The element’s full URL */
  url?: Maybe<Scalars['String']>;
  /** The same element in other locales. */
  localized?: Maybe<Array<Maybe<EntryInterface>>>;
  /** Returns the previous element relative to this one, from a given set of criteria. */
  prev?: Maybe<EntryInterface>;
  /** Returns the next element relative to this one, from a given set of criteria. */
  next?: Maybe<EntryInterface>;
};


/** This is the interface implemented by all entries. */
export type EntryInterface_CountArgs = {
  field: Scalars['String'];
};


/** This is the interface implemented by all entries. */
export type EntryInterfaceChildrenArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


/** This is the interface implemented by all entries. */
export type EntryInterfaceDescendantsArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


/** This is the interface implemented by all entries. */
export type EntryInterfaceParentArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


/** This is the interface implemented by all entries. */
export type EntryInterfaceAncestorsArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


/** This is the interface implemented by all entries. */
export type EntryInterfaceLocalizedArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


/** This is the interface implemented by all entries. */
export type EntryInterfacePrevArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


/** This is the interface implemented by all entries. */
export type EntryInterfaceNextArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};

/** This is the interface implemented by all global sets. */
export type GlobalSetInterface = {
  /** The id of the entity */
  id?: Maybe<Scalars['ID']>;
  /** The uid of the entity */
  uid?: Maybe<Scalars['String']>;
  /** Return a number of related elements for a field. */
  _count?: Maybe<Scalars['Int']>;
  /** The element’s title. */
  title?: Maybe<Scalars['String']>;
  /** The element’s slug. */
  slug?: Maybe<Scalars['String']>;
  /** The element’s URI. */
  uri?: Maybe<Scalars['String']>;
  /** Whether the element is enabled or not. */
  enabled?: Maybe<Scalars['Boolean']>;
  /** Whether the element is archived or not. */
  archived?: Maybe<Scalars['Boolean']>;
  /** The ID of the site the element is associated with. */
  siteId?: Maybe<Scalars['Int']>;
  /** The unique identifier for an element-site relation. */
  siteSettingsId?: Maybe<Scalars['ID']>;
  /** The language of the site element is associated with. */
  language?: Maybe<Scalars['String']>;
  /** The element’s search score, if the `search` parameter was used when querying for the element. */
  searchScore?: Maybe<Scalars['String']>;
  /** Whether the element has been soft-deleted or not. */
  trashed?: Maybe<Scalars['Boolean']>;
  /** The element's status. */
  status?: Maybe<Scalars['String']>;
  /** The date the element was created. */
  dateCreated?: Maybe<Scalars['DateTime']>;
  /** The date the element was last updated. */
  dateUpdated?: Maybe<Scalars['DateTime']>;
  /** The name of the global set. */
  name?: Maybe<Scalars['String']>;
  /** The handle of the global set. */
  handle?: Maybe<Scalars['String']>;
};


/** This is the interface implemented by all global sets. */
export type GlobalSetInterface_CountArgs = {
  field: Scalars['String'];
};

/** This is the interface implemented by all matrix blocks. */
export type MatrixBlockInterface = {
  /** The id of the entity */
  id?: Maybe<Scalars['ID']>;
  /** The uid of the entity */
  uid?: Maybe<Scalars['String']>;
  /** Return a number of related elements for a field. */
  _count?: Maybe<Scalars['Int']>;
  /** The element’s title. */
  title?: Maybe<Scalars['String']>;
  /** The element’s slug. */
  slug?: Maybe<Scalars['String']>;
  /** The element’s URI. */
  uri?: Maybe<Scalars['String']>;
  /** Whether the element is enabled or not. */
  enabled?: Maybe<Scalars['Boolean']>;
  /** Whether the element is archived or not. */
  archived?: Maybe<Scalars['Boolean']>;
  /** The ID of the site the element is associated with. */
  siteId?: Maybe<Scalars['Int']>;
  /** The unique identifier for an element-site relation. */
  siteSettingsId?: Maybe<Scalars['ID']>;
  /** The language of the site element is associated with. */
  language?: Maybe<Scalars['String']>;
  /** The element’s search score, if the `search` parameter was used when querying for the element. */
  searchScore?: Maybe<Scalars['String']>;
  /** Whether the element has been soft-deleted or not. */
  trashed?: Maybe<Scalars['Boolean']>;
  /** The element's status. */
  status?: Maybe<Scalars['String']>;
  /** The date the element was created. */
  dateCreated?: Maybe<Scalars['DateTime']>;
  /** The date the element was last updated. */
  dateUpdated?: Maybe<Scalars['DateTime']>;
  /** The ID of the field that owns the matrix block. */
  fieldId?: Maybe<Scalars['Int']>;
  /** The ID of the element that owns the matrix block. */
  ownerId?: Maybe<Scalars['Int']>;
  /** The ID of the matrix block's type. */
  typeId?: Maybe<Scalars['Int']>;
  /** The handle of the matrix block's type. */
  typeHandle?: Maybe<Scalars['String']>;
  /** The sort order of the matrix block within the owner element field. */
  sortOrder?: Maybe<Scalars['Int']>;
};


/** This is the interface implemented by all matrix blocks. */
export type MatrixBlockInterface_CountArgs = {
  field: Scalars['String'];
};

export type Mutation = {
  ping?: Maybe<Scalars['String']>;
};

/** This is the interface implemented by all neo blocks. */
export type NeoBlockInterface = {
  /** The id of the entity */
  id?: Maybe<Scalars['ID']>;
  /** The uid of the entity */
  uid?: Maybe<Scalars['String']>;
  /** Return a number of related elements for a field. */
  _count?: Maybe<Scalars['Int']>;
  /** The element’s title. */
  title?: Maybe<Scalars['String']>;
  /** The element’s slug. */
  slug?: Maybe<Scalars['String']>;
  /** The element’s URI. */
  uri?: Maybe<Scalars['String']>;
  /** Whether the element is enabled or not. */
  enabled?: Maybe<Scalars['Boolean']>;
  /** Whether the element is archived or not. */
  archived?: Maybe<Scalars['Boolean']>;
  /** The ID of the site the element is associated with. */
  siteId?: Maybe<Scalars['Int']>;
  /** The unique identifier for an element-site relation. */
  siteSettingsId?: Maybe<Scalars['ID']>;
  /** The language of the site element is associated with. */
  language?: Maybe<Scalars['String']>;
  /** The element’s search score, if the `search` parameter was used when querying for the element. */
  searchScore?: Maybe<Scalars['String']>;
  /** Whether the element has been soft-deleted or not. */
  trashed?: Maybe<Scalars['Boolean']>;
  /** The element's status. */
  status?: Maybe<Scalars['String']>;
  /** The date the element was created. */
  dateCreated?: Maybe<Scalars['DateTime']>;
  /** The date the element was last updated. */
  dateUpdated?: Maybe<Scalars['DateTime']>;
  /** The ID of the field that owns the neo block. */
  fieldId?: Maybe<Scalars['Int']>;
  /** The Neo block's level. */
  level?: Maybe<Scalars['Int']>;
  /** The ID of the element that owns the neo block. */
  ownerId?: Maybe<Scalars['Int']>;
  /** The ID of the neo block's type. */
  typeId?: Maybe<Scalars['Int']>;
  /** The handle of the neo block's type. */
  typeHandle?: Maybe<Scalars['String']>;
};


/** This is the interface implemented by all neo blocks. */
export type NeoBlockInterface_CountArgs = {
  field: Scalars['String'];
};


export type Query = {
  ping?: Maybe<Scalars['String']>;
  /** This query is used to query for entries. */
  entries?: Maybe<Array<Maybe<EntryInterface>>>;
  /** This query is used to return the number of entries. */
  entryCount: Scalars['Int'];
  /** This query is used to query for a single entry. */
  entry?: Maybe<EntryInterface>;
  /** This query is used to query for assets. */
  assets?: Maybe<Array<Maybe<AssetInterface>>>;
  /** This query is used to return the number of assets. */
  assetCount: Scalars['Int'];
  /** This query is used to query for a single asset. */
  asset?: Maybe<AssetInterface>;
  /** This query is used to query for global sets. */
  globalSets?: Maybe<Array<Maybe<GlobalSetInterface>>>;
  /** This query is used to query for a single global set. */
  globalSet?: Maybe<GlobalSetInterface>;
};


export type QueryEntriesArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type QueryEntryCountArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type QueryEntryArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type QueryAssetsArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  volumeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  volume?: Maybe<Array<Maybe<Scalars['String']>>>;
  folderId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  filename?: Maybe<Array<Maybe<Scalars['String']>>>;
  kind?: Maybe<Array<Maybe<Scalars['String']>>>;
  height?: Maybe<Array<Maybe<Scalars['String']>>>;
  width?: Maybe<Array<Maybe<Scalars['String']>>>;
  size?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateModified?: Maybe<Scalars['String']>;
  includeSubfolders?: Maybe<Scalars['Boolean']>;
  withTransforms?: Maybe<Array<Maybe<Scalars['String']>>>;
  uploader?: Maybe<Scalars['QueryArgument']>;
};


export type QueryAssetCountArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  volumeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  volume?: Maybe<Array<Maybe<Scalars['String']>>>;
  folderId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  filename?: Maybe<Array<Maybe<Scalars['String']>>>;
  kind?: Maybe<Array<Maybe<Scalars['String']>>>;
  height?: Maybe<Array<Maybe<Scalars['String']>>>;
  width?: Maybe<Array<Maybe<Scalars['String']>>>;
  size?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateModified?: Maybe<Scalars['String']>;
  includeSubfolders?: Maybe<Scalars['Boolean']>;
  withTransforms?: Maybe<Array<Maybe<Scalars['String']>>>;
  uploader?: Maybe<Scalars['QueryArgument']>;
};


export type QueryAssetArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  volumeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  volume?: Maybe<Array<Maybe<Scalars['String']>>>;
  folderId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  filename?: Maybe<Array<Maybe<Scalars['String']>>>;
  kind?: Maybe<Array<Maybe<Scalars['String']>>>;
  height?: Maybe<Array<Maybe<Scalars['String']>>>;
  width?: Maybe<Array<Maybe<Scalars['String']>>>;
  size?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateModified?: Maybe<Scalars['String']>;
  includeSubfolders?: Maybe<Scalars['Boolean']>;
  withTransforms?: Maybe<Array<Maybe<Scalars['String']>>>;
  uploader?: Maybe<Scalars['QueryArgument']>;
};


export type QueryGlobalSetsArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  handle?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type QueryGlobalSetArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  handle?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type TagCriteriaInput = {
  /** Narrows the query results based on the elements’ IDs. */
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  /** Narrows the query results based on the elements’ UIDs. */
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Determines which site(s) the elements should be queried in. Defaults to the current (requested) site. */
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Determines which site(s) the elements should be queried in. Defaults to the current (requested) site. */
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  /** Determines whether only elements with unique IDs should be returned by the query. */
  unique?: Maybe<Scalars['Boolean']>;
  /** Determines which site should be selected when querying multi-site elements. */
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  /** Narrows the query results based on whether the elements are enabled in the site they’re being queried in, per the `site` argument. */
  enabledForSite?: Maybe<Scalars['Boolean']>;
  /** Narrows the query results based on the elements’ titles. */
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Narrows the query results based on the elements’ slugs. */
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Narrows the query results based on the elements’ URIs. */
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Narrows the query results to only elements that match a search query. */
  search?: Maybe<Scalars['String']>;
  /** Narrows the query results to elements that relate to the provided element IDs. This argument is ignored, if `relatedToAll` is also used. */
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  /** Narrows the query results to elements that relate to an asset list defined with this argument. */
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  /** Narrows the query results to elements that relate to an entry list defined with this argument. */
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  /** Narrows the query results to elements that relate to a use list defined with this argument. */
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  /** Narrows the query results to elements that relate to a category list defined with this argument. */
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  /** Narrows the query results to elements that relate to a tag list defined with this argument. */
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  /** Narrows the query results to elements that relate to *all* of the provided element IDs. Using this argument will cause `relatedTo` argument to be ignored. **This argument is deprecated.** `relatedTo: ["and", ...ids]` should be used instead. */
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  /** Narrows the query results based on a reference string. */
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Causes the query results to be returned in the order specified by the `id` argument. */
  fixedOrder?: Maybe<Scalars['Boolean']>;
  /** Causes the query results to be returned in reverse order. */
  inReverse?: Maybe<Scalars['Boolean']>;
  /** Narrows the query results based on the elements’ creation dates. */
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Narrows the query results based on the elements’ last-updated dates. */
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Sets the offset for paginated results. */
  offset?: Maybe<Scalars['Int']>;
  /** Sets the limit for paginated results. */
  limit?: Maybe<Scalars['Int']>;
  /** Sets the field the returned elements should be ordered by. */
  orderBy?: Maybe<Scalars['String']>;
  /** Narrows the query results based on the unique identifier for an element-site relation. */
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  /** Narrows the query results based on the tag groups the tags belong to per the group’s handles. */
  group?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Narrows the query results based on the tag groups the tags belong to, per the groups’ IDs. */
  groupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
};

export type User = ElementInterface & UserInterface & {
  /** The id of the entity */
  id?: Maybe<Scalars['ID']>;
  /** The uid of the entity */
  uid?: Maybe<Scalars['String']>;
  /** Return a number of related elements for a field. */
  _count?: Maybe<Scalars['Int']>;
  /** The element’s title. */
  title?: Maybe<Scalars['String']>;
  /** The element’s slug. */
  slug?: Maybe<Scalars['String']>;
  /** The element’s URI. */
  uri?: Maybe<Scalars['String']>;
  /** Whether the element is enabled or not. */
  enabled?: Maybe<Scalars['Boolean']>;
  /** Whether the element is archived or not. */
  archived?: Maybe<Scalars['Boolean']>;
  /** The ID of the site the element is associated with. */
  siteId?: Maybe<Scalars['Int']>;
  /** The unique identifier for an element-site relation. */
  siteSettingsId?: Maybe<Scalars['ID']>;
  /** The language of the site element is associated with. */
  language?: Maybe<Scalars['String']>;
  /** The element’s search score, if the `search` parameter was used when querying for the element. */
  searchScore?: Maybe<Scalars['String']>;
  /** Whether the element has been soft-deleted or not. */
  trashed?: Maybe<Scalars['Boolean']>;
  /** The element's status. */
  status?: Maybe<Scalars['String']>;
  /** The date the element was created. */
  dateCreated?: Maybe<Scalars['DateTime']>;
  /** The date the element was last updated. */
  dateUpdated?: Maybe<Scalars['DateTime']>;
  /** The user's first name or username. */
  friendlyName?: Maybe<Scalars['String']>;
  /** The user's full name. */
  fullName?: Maybe<Scalars['String']>;
  /** The user's full name or username. */
  name?: Maybe<Scalars['String']>;
  /** The user’s preferences. */
  preferences?: Maybe<Scalars['String']>;
  /** The user’s preferred language. */
  preferredLanguage?: Maybe<Scalars['String']>;
  /** The username. */
  username?: Maybe<Scalars['String']>;
  /** The user's first name. */
  firstName?: Maybe<Scalars['String']>;
  /** The user's last name. */
  lastName?: Maybe<Scalars['String']>;
  /** The user's email. */
  email?: Maybe<Scalars['String']>;
};


export type User_CountArgs = {
  field: Scalars['String'];
};

export type UserCriteriaInput = {
  /** Narrows the query results based on the elements’ IDs. */
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  /** Narrows the query results based on the elements’ UIDs. */
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Determines which site(s) the elements should be queried in. Defaults to the current (requested) site. */
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Determines which site(s) the elements should be queried in. Defaults to the current (requested) site. */
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  /** Determines whether only elements with unique IDs should be returned by the query. */
  unique?: Maybe<Scalars['Boolean']>;
  /** Determines which site should be selected when querying multi-site elements. */
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  /** Narrows the query results based on whether the elements are enabled in the site they’re being queried in, per the `site` argument. */
  enabledForSite?: Maybe<Scalars['Boolean']>;
  /** Narrows the query results based on the elements’ titles. */
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Narrows the query results based on the elements’ slugs. */
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Narrows the query results based on the elements’ URIs. */
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Narrows the query results to only elements that match a search query. */
  search?: Maybe<Scalars['String']>;
  /** Narrows the query results to elements that relate to the provided element IDs. This argument is ignored, if `relatedToAll` is also used. */
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  /** Narrows the query results to elements that relate to an asset list defined with this argument. */
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  /** Narrows the query results to elements that relate to an entry list defined with this argument. */
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  /** Narrows the query results to elements that relate to a use list defined with this argument. */
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  /** Narrows the query results to elements that relate to a category list defined with this argument. */
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  /** Narrows the query results to elements that relate to a tag list defined with this argument. */
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  /** Narrows the query results to elements that relate to *all* of the provided element IDs. Using this argument will cause `relatedTo` argument to be ignored. **This argument is deprecated.** `relatedTo: ["and", ...ids]` should be used instead. */
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  /** Narrows the query results based on a reference string. */
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Causes the query results to be returned in the order specified by the `id` argument. */
  fixedOrder?: Maybe<Scalars['Boolean']>;
  /** Causes the query results to be returned in reverse order. */
  inReverse?: Maybe<Scalars['Boolean']>;
  /** Narrows the query results based on the elements’ creation dates. */
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Narrows the query results based on the elements’ last-updated dates. */
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Sets the offset for paginated results. */
  offset?: Maybe<Scalars['Int']>;
  /** Sets the limit for paginated results. */
  limit?: Maybe<Scalars['Int']>;
  /** Sets the field the returned elements should be ordered by. */
  orderBy?: Maybe<Scalars['String']>;
  /** Narrows the query results based on the unique identifier for an element-site relation. */
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  /** Narrows the query results based on the users’ email addresses. */
  email?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Narrows the query results based on the users’ usernames. */
  username?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Narrows the query results based on the users’ first names. */
  firstName?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Narrows the query results based on the users’ last names. */
  lastName?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Narrows the query results to only users that have (or don’t have) a user photo. */
  hasPhoto?: Maybe<Scalars['Boolean']>;
  /** Narrows the query results based on the user group the users belong to, per the groups’ IDs. */
  groupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  /** Narrows the query results based on the user group the users belong to. */
  group?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
};

/** This is the interface implemented by all users. */
export type UserInterface = {
  /** The id of the entity */
  id?: Maybe<Scalars['ID']>;
  /** The uid of the entity */
  uid?: Maybe<Scalars['String']>;
  /** Return a number of related elements for a field. */
  _count?: Maybe<Scalars['Int']>;
  /** The element’s title. */
  title?: Maybe<Scalars['String']>;
  /** The element’s slug. */
  slug?: Maybe<Scalars['String']>;
  /** The element’s URI. */
  uri?: Maybe<Scalars['String']>;
  /** Whether the element is enabled or not. */
  enabled?: Maybe<Scalars['Boolean']>;
  /** Whether the element is archived or not. */
  archived?: Maybe<Scalars['Boolean']>;
  /** The ID of the site the element is associated with. */
  siteId?: Maybe<Scalars['Int']>;
  /** The unique identifier for an element-site relation. */
  siteSettingsId?: Maybe<Scalars['ID']>;
  /** The language of the site element is associated with. */
  language?: Maybe<Scalars['String']>;
  /** The element’s search score, if the `search` parameter was used when querying for the element. */
  searchScore?: Maybe<Scalars['String']>;
  /** Whether the element has been soft-deleted or not. */
  trashed?: Maybe<Scalars['Boolean']>;
  /** The element's status. */
  status?: Maybe<Scalars['String']>;
  /** The date the element was created. */
  dateCreated?: Maybe<Scalars['DateTime']>;
  /** The date the element was last updated. */
  dateUpdated?: Maybe<Scalars['DateTime']>;
  /** The user's first name or username. */
  friendlyName?: Maybe<Scalars['String']>;
  /** The user's full name. */
  fullName?: Maybe<Scalars['String']>;
  /** The user's full name or username. */
  name?: Maybe<Scalars['String']>;
  /** The user’s preferences. */
  preferences?: Maybe<Scalars['String']>;
  /** The user’s preferred language. */
  preferredLanguage?: Maybe<Scalars['String']>;
  /** The username. */
  username?: Maybe<Scalars['String']>;
  /** The user's first name. */
  firstName?: Maybe<Scalars['String']>;
  /** The user's last name. */
  lastName?: Maybe<Scalars['String']>;
  /** The user's email. */
  email?: Maybe<Scalars['String']>;
};


/** This is the interface implemented by all users. */
export type UserInterface_CountArgs = {
  field: Scalars['String'];
};

export type Assets_Asset = ElementInterface & AssetInterface & {
  /** The id of the entity */
  id?: Maybe<Scalars['ID']>;
  /** The uid of the entity */
  uid?: Maybe<Scalars['String']>;
  /** Return a number of related elements for a field. */
  _count?: Maybe<Scalars['Int']>;
  /** The element’s title. */
  title?: Maybe<Scalars['String']>;
  /** The element’s slug. */
  slug?: Maybe<Scalars['String']>;
  /** The element’s URI. */
  uri?: Maybe<Scalars['String']>;
  /** Whether the element is enabled or not. */
  enabled?: Maybe<Scalars['Boolean']>;
  /** Whether the element is archived or not. */
  archived?: Maybe<Scalars['Boolean']>;
  /** The ID of the site the element is associated with. */
  siteId?: Maybe<Scalars['Int']>;
  /** The unique identifier for an element-site relation. */
  siteSettingsId?: Maybe<Scalars['ID']>;
  /** The language of the site element is associated with. */
  language?: Maybe<Scalars['String']>;
  /** The element’s search score, if the `search` parameter was used when querying for the element. */
  searchScore?: Maybe<Scalars['String']>;
  /** Whether the element has been soft-deleted or not. */
  trashed?: Maybe<Scalars['Boolean']>;
  /** The element's status. */
  status?: Maybe<Scalars['String']>;
  /** The date the element was created. */
  dateCreated?: Maybe<Scalars['DateTime']>;
  /** The date the element was last updated. */
  dateUpdated?: Maybe<Scalars['DateTime']>;
  /** The ID of the volume that the asset belongs to. */
  volumeId?: Maybe<Scalars['Int']>;
  /** The ID of the folder that the asset belongs to. */
  folderId?: Maybe<Scalars['Int']>;
  /** The filename of the asset file. */
  filename?: Maybe<Scalars['String']>;
  /** The file extension for the asset file. */
  extension?: Maybe<Scalars['String']>;
  /** Whether a user-defined focal point is set on the asset. */
  hasFocalPoint?: Maybe<Scalars['Boolean']>;
  /** The focal point represented as an array with `x` and `y` keys, or null if it's not an image. */
  focalPoint?: Maybe<Array<Maybe<Scalars['Float']>>>;
  /** The file kind. */
  kind?: Maybe<Scalars['String']>;
  /** The file size in bytes. */
  size?: Maybe<Scalars['String']>;
  /** The height in pixels or null if it's not an image. */
  height?: Maybe<Scalars['Int']>;
  /** The width in pixels or null if it's not an image. */
  width?: Maybe<Scalars['Int']>;
  /** An `<img>` tag based on this asset. */
  img?: Maybe<Scalars['String']>;
  /** Returns a `srcset` attribute value based on the given widths or x-descriptors. */
  srcset?: Maybe<Scalars['String']>;
  /** The full URL of the asset. This field accepts the same fields as the `transform` directive. */
  url?: Maybe<Scalars['String']>;
  /** The file’s MIME type, if it can be determined. */
  mimeType?: Maybe<Scalars['String']>;
  /** The asset's path in the volume. */
  path?: Maybe<Scalars['String']>;
  /** The date the asset file was last modified. */
  dateModified?: Maybe<Scalars['DateTime']>;
  /** Returns the previous element relative to this one, from a given set of criteria. */
  prev?: Maybe<AssetInterface>;
  /** Returns the next element relative to this one, from a given set of criteria. */
  next?: Maybe<AssetInterface>;
};


export type Assets_Asset_CountArgs = {
  field: Scalars['String'];
};


export type Assets_AssetHeightArgs = {
  handle?: Maybe<Scalars['String']>;
  transform?: Maybe<Scalars['String']>;
  width?: Maybe<Scalars['Int']>;
  height?: Maybe<Scalars['Int']>;
  mode?: Maybe<Scalars['String']>;
  position?: Maybe<Scalars['String']>;
  interlace?: Maybe<Scalars['String']>;
  quality?: Maybe<Scalars['Int']>;
  format?: Maybe<Scalars['String']>;
  immediately?: Maybe<Scalars['Boolean']>;
};


export type Assets_AssetWidthArgs = {
  handle?: Maybe<Scalars['String']>;
  transform?: Maybe<Scalars['String']>;
  width?: Maybe<Scalars['Int']>;
  height?: Maybe<Scalars['Int']>;
  mode?: Maybe<Scalars['String']>;
  position?: Maybe<Scalars['String']>;
  interlace?: Maybe<Scalars['String']>;
  quality?: Maybe<Scalars['Int']>;
  format?: Maybe<Scalars['String']>;
  immediately?: Maybe<Scalars['Boolean']>;
};


export type Assets_AssetSrcsetArgs = {
  sizes: Array<Scalars['String']>;
};


export type Assets_AssetUrlArgs = {
  handle?: Maybe<Scalars['String']>;
  transform?: Maybe<Scalars['String']>;
  width?: Maybe<Scalars['Int']>;
  height?: Maybe<Scalars['Int']>;
  mode?: Maybe<Scalars['String']>;
  position?: Maybe<Scalars['String']>;
  interlace?: Maybe<Scalars['String']>;
  quality?: Maybe<Scalars['Int']>;
  format?: Maybe<Scalars['String']>;
  immediately?: Maybe<Scalars['Boolean']>;
};


export type Assets_AssetPrevArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  volumeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  volume?: Maybe<Array<Maybe<Scalars['String']>>>;
  folderId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  filename?: Maybe<Array<Maybe<Scalars['String']>>>;
  kind?: Maybe<Array<Maybe<Scalars['String']>>>;
  height?: Maybe<Array<Maybe<Scalars['String']>>>;
  width?: Maybe<Array<Maybe<Scalars['String']>>>;
  size?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateModified?: Maybe<Scalars['String']>;
  includeSubfolders?: Maybe<Scalars['Boolean']>;
  withTransforms?: Maybe<Array<Maybe<Scalars['String']>>>;
  uploader?: Maybe<Scalars['QueryArgument']>;
};


export type Assets_AssetNextArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  volumeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  volume?: Maybe<Array<Maybe<Scalars['String']>>>;
  folderId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  filename?: Maybe<Array<Maybe<Scalars['String']>>>;
  kind?: Maybe<Array<Maybe<Scalars['String']>>>;
  height?: Maybe<Array<Maybe<Scalars['String']>>>;
  width?: Maybe<Array<Maybe<Scalars['String']>>>;
  size?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateModified?: Maybe<Scalars['String']>;
  includeSubfolders?: Maybe<Scalars['Boolean']>;
  withTransforms?: Maybe<Array<Maybe<Scalars['String']>>>;
  uploader?: Maybe<Scalars['QueryArgument']>;
};

export type Cards_Card_BlockType = ElementInterface & MatrixBlockInterface & {
  /** The id of the entity */
  id?: Maybe<Scalars['ID']>;
  /** The uid of the entity */
  uid?: Maybe<Scalars['String']>;
  /** Return a number of related elements for a field. */
  _count?: Maybe<Scalars['Int']>;
  /** The element’s title. */
  title?: Maybe<Scalars['String']>;
  /** The element’s slug. */
  slug?: Maybe<Scalars['String']>;
  /** The element’s URI. */
  uri?: Maybe<Scalars['String']>;
  /** Whether the element is enabled or not. */
  enabled?: Maybe<Scalars['Boolean']>;
  /** Whether the element is archived or not. */
  archived?: Maybe<Scalars['Boolean']>;
  /** The ID of the site the element is associated with. */
  siteId?: Maybe<Scalars['Int']>;
  /** The unique identifier for an element-site relation. */
  siteSettingsId?: Maybe<Scalars['ID']>;
  /** The language of the site element is associated with. */
  language?: Maybe<Scalars['String']>;
  /** The element’s search score, if the `search` parameter was used when querying for the element. */
  searchScore?: Maybe<Scalars['String']>;
  /** Whether the element has been soft-deleted or not. */
  trashed?: Maybe<Scalars['Boolean']>;
  /** The element's status. */
  status?: Maybe<Scalars['String']>;
  /** The date the element was created. */
  dateCreated?: Maybe<Scalars['DateTime']>;
  /** The date the element was last updated. */
  dateUpdated?: Maybe<Scalars['DateTime']>;
  /** The ID of the field that owns the matrix block. */
  fieldId?: Maybe<Scalars['Int']>;
  /** The ID of the element that owns the matrix block. */
  ownerId?: Maybe<Scalars['Int']>;
  /** The ID of the matrix block's type. */
  typeId?: Maybe<Scalars['Int']>;
  /** The handle of the matrix block's type. */
  typeHandle?: Maybe<Scalars['String']>;
  /** The sort order of the matrix block within the owner element field. */
  sortOrder?: Maybe<Scalars['Int']>;
  image?: Maybe<Array<Maybe<AssetInterface>>>;
  cardTitle?: Maybe<Scalars['String']>;
  subtitle?: Maybe<Scalars['String']>;
};


export type Cards_Card_BlockType_CountArgs = {
  field: Scalars['String'];
};


export type Cards_Card_BlockTypeImageArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  volumeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  volume?: Maybe<Array<Maybe<Scalars['String']>>>;
  folderId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  filename?: Maybe<Array<Maybe<Scalars['String']>>>;
  kind?: Maybe<Array<Maybe<Scalars['String']>>>;
  height?: Maybe<Array<Maybe<Scalars['String']>>>;
  width?: Maybe<Array<Maybe<Scalars['String']>>>;
  size?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateModified?: Maybe<Scalars['String']>;
  includeSubfolders?: Maybe<Scalars['Boolean']>;
  withTransforms?: Maybe<Array<Maybe<Scalars['String']>>>;
  uploader?: Maybe<Scalars['QueryArgument']>;
};

export type ContactDirectory_MatrixField = ContactDirectory_Entry_BlockType;

export type ContactDirectory_Entry_BlockType = ElementInterface & MatrixBlockInterface & {
  /** The id of the entity */
  id?: Maybe<Scalars['ID']>;
  /** The uid of the entity */
  uid?: Maybe<Scalars['String']>;
  /** Return a number of related elements for a field. */
  _count?: Maybe<Scalars['Int']>;
  /** The element’s title. */
  title?: Maybe<Scalars['String']>;
  /** The element’s slug. */
  slug?: Maybe<Scalars['String']>;
  /** The element’s URI. */
  uri?: Maybe<Scalars['String']>;
  /** Whether the element is enabled or not. */
  enabled?: Maybe<Scalars['Boolean']>;
  /** Whether the element is archived or not. */
  archived?: Maybe<Scalars['Boolean']>;
  /** The ID of the site the element is associated with. */
  siteId?: Maybe<Scalars['Int']>;
  /** The unique identifier for an element-site relation. */
  siteSettingsId?: Maybe<Scalars['ID']>;
  /** The language of the site element is associated with. */
  language?: Maybe<Scalars['String']>;
  /** The element’s search score, if the `search` parameter was used when querying for the element. */
  searchScore?: Maybe<Scalars['String']>;
  /** Whether the element has been soft-deleted or not. */
  trashed?: Maybe<Scalars['Boolean']>;
  /** The element's status. */
  status?: Maybe<Scalars['String']>;
  /** The date the element was created. */
  dateCreated?: Maybe<Scalars['DateTime']>;
  /** The date the element was last updated. */
  dateUpdated?: Maybe<Scalars['DateTime']>;
  /** The ID of the field that owns the matrix block. */
  fieldId?: Maybe<Scalars['Int']>;
  /** The ID of the element that owns the matrix block. */
  ownerId?: Maybe<Scalars['Int']>;
  /** The ID of the matrix block's type. */
  typeId?: Maybe<Scalars['Int']>;
  /** The handle of the matrix block's type. */
  typeHandle?: Maybe<Scalars['String']>;
  /** The sort order of the matrix block within the owner element field. */
  sortOrder?: Maybe<Scalars['Int']>;
  entryTitle?: Maybe<Scalars['String']>;
  person?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  email?: Maybe<LinkField_Link>;
};


export type ContactDirectory_Entry_BlockType_CountArgs = {
  field: Scalars['String'];
};

export type Contact_Contact_Entry = ElementInterface & EntryInterface & {
  /** The id of the entity */
  id?: Maybe<Scalars['ID']>;
  /** The uid of the entity */
  uid?: Maybe<Scalars['String']>;
  /** Return a number of related elements for a field. */
  _count?: Maybe<Scalars['Int']>;
  /** The element’s title. */
  title?: Maybe<Scalars['String']>;
  /** The element’s slug. */
  slug?: Maybe<Scalars['String']>;
  /** The element’s URI. */
  uri?: Maybe<Scalars['String']>;
  /** Whether the element is enabled or not. */
  enabled?: Maybe<Scalars['Boolean']>;
  /** Whether the element is archived or not. */
  archived?: Maybe<Scalars['Boolean']>;
  /** The ID of the site the element is associated with. */
  siteId?: Maybe<Scalars['Int']>;
  /** The unique identifier for an element-site relation. */
  siteSettingsId?: Maybe<Scalars['ID']>;
  /** The language of the site element is associated with. */
  language?: Maybe<Scalars['String']>;
  /** The element’s search score, if the `search` parameter was used when querying for the element. */
  searchScore?: Maybe<Scalars['String']>;
  /** Whether the element has been soft-deleted or not. */
  trashed?: Maybe<Scalars['Boolean']>;
  /** The element's status. */
  status?: Maybe<Scalars['String']>;
  /** The date the element was created. */
  dateCreated?: Maybe<Scalars['DateTime']>;
  /** The date the element was last updated. */
  dateUpdated?: Maybe<Scalars['DateTime']>;
  /** The element’s left position within its structure. */
  lft?: Maybe<Scalars['Int']>;
  /** The element’s right position within its structure. */
  rgt?: Maybe<Scalars['Int']>;
  /** The element’s level within its structure */
  level?: Maybe<Scalars['Int']>;
  /** The element’s structure’s root ID */
  root?: Maybe<Scalars['Int']>;
  /** The element’s structure ID. */
  structureId?: Maybe<Scalars['Int']>;
  /** Returns whether this is a draft. */
  isDraft?: Maybe<Scalars['Boolean']>;
  /** Returns whether this is a revision. */
  isRevision?: Maybe<Scalars['Boolean']>;
  /** The ID of the draft to return (from the `drafts` table) */
  draftId?: Maybe<Scalars['Int']>;
  /** Returns whether this is an unpublished draft. */
  isUnpublishedDraft?: Maybe<Scalars['Boolean']>;
  /** Returns whether this is an unpublished draft. **This field is deprecated.** `isUnpublishedDraft` should be used instead. */
  isUnsavedDraft?: Maybe<Scalars['Boolean']>;
  /** The name of the draft. */
  draftName?: Maybe<Scalars['String']>;
  /** The notes for the draft. */
  draftNotes?: Maybe<Scalars['String']>;
  /** Returns the entry’s canonical ID. */
  canonicalId?: Maybe<Scalars['Int']>;
  /** Returns the entry’s canonical UUID. */
  canonicalUid?: Maybe<Scalars['String']>;
  /**
   * Returns the entry’s canonical ID.
   * @deprecated this field has been deprecated since Craft 3.7.7. Use `canonicalId` instead.
   */
  sourceId?: Maybe<Scalars['Int']>;
  /**
   * Returns the entry’s canonical UUID.
   * @deprecated this field has been deprecated since Craft 3.7.7. Use `canonicalUid` instead.
   */
  sourceUid?: Maybe<Scalars['String']>;
  /** The ID of the section that contains the entry. */
  sectionId?: Maybe<Scalars['Int']>;
  /** The handle of the section that contains the entry. */
  sectionHandle?: Maybe<Scalars['String']>;
  /** The ID of the entry type that contains the entry. */
  typeId?: Maybe<Scalars['Int']>;
  /** The handle of the entry type that contains the entry. */
  typeHandle?: Maybe<Scalars['String']>;
  /** The entry's post date. */
  postDate?: Maybe<Scalars['DateTime']>;
  /** The expiry date of the entry. */
  expiryDate?: Maybe<Scalars['DateTime']>;
  /** The entry’s children, if the section is a structure. Accepts the same arguments as the `entries` query. */
  children?: Maybe<Array<Maybe<EntryInterface>>>;
  /** The entry’s descendants, if the section is a structure. Accepts the same arguments as the `entries` query. */
  descendants?: Maybe<Array<Maybe<EntryInterface>>>;
  /** The entry’s parent, if the section is a structure. */
  parent?: Maybe<EntryInterface>;
  /** The entry’s ancestors, if the section is a structure. Accepts the same arguments as the `entries` query. */
  ancestors?: Maybe<Array<Maybe<EntryInterface>>>;
  /** The element’s full URL */
  url?: Maybe<Scalars['String']>;
  /** The same element in other locales. */
  localized?: Maybe<Array<Maybe<EntryInterface>>>;
  /** Returns the previous element relative to this one, from a given set of criteria. */
  prev?: Maybe<EntryInterface>;
  /** Returns the next element relative to this one, from a given set of criteria. */
  next?: Maybe<EntryInterface>;
  seo?: Maybe<Array<Maybe<Seo_MatrixField>>>;
  text?: Maybe<Scalars['String']>;
  phone?: Maybe<LinkField_Link>;
  email?: Maybe<LinkField_Link>;
  textAdditional?: Maybe<Scalars['String']>;
  contactDirectory?: Maybe<Array<Maybe<ContactDirectory_MatrixField>>>;
};


export type Contact_Contact_Entry_CountArgs = {
  field: Scalars['String'];
};


export type Contact_Contact_EntryChildrenArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Contact_Contact_EntryDescendantsArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Contact_Contact_EntryParentArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Contact_Contact_EntryAncestorsArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Contact_Contact_EntryLocalizedArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Contact_Contact_EntryPrevArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Contact_Contact_EntryNextArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Contact_Contact_EntrySeoArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  fieldId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ownerId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Contact_Contact_EntryContactDirectoryArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  fieldId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ownerId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type Cta_NeoField = Cta_Cta_BlockType | Cta_Link_BlockType;

export type Cta_Cta_BlockType = NeoBlockInterface & ElementInterface & {
  /** The id of the entity */
  id?: Maybe<Scalars['ID']>;
  /** The uid of the entity */
  uid?: Maybe<Scalars['String']>;
  /** Return a number of related elements for a field. */
  _count?: Maybe<Scalars['Int']>;
  /** The element’s title. */
  title?: Maybe<Scalars['String']>;
  /** The element’s slug. */
  slug?: Maybe<Scalars['String']>;
  /** The element’s URI. */
  uri?: Maybe<Scalars['String']>;
  /** Whether the element is enabled or not. */
  enabled?: Maybe<Scalars['Boolean']>;
  /** Whether the element is archived or not. */
  archived?: Maybe<Scalars['Boolean']>;
  /** The ID of the site the element is associated with. */
  siteId?: Maybe<Scalars['Int']>;
  /** The unique identifier for an element-site relation. */
  siteSettingsId?: Maybe<Scalars['ID']>;
  /** The language of the site element is associated with. */
  language?: Maybe<Scalars['String']>;
  /** The element’s search score, if the `search` parameter was used when querying for the element. */
  searchScore?: Maybe<Scalars['String']>;
  /** Whether the element has been soft-deleted or not. */
  trashed?: Maybe<Scalars['Boolean']>;
  /** The element's status. */
  status?: Maybe<Scalars['String']>;
  /** The date the element was created. */
  dateCreated?: Maybe<Scalars['DateTime']>;
  /** The date the element was last updated. */
  dateUpdated?: Maybe<Scalars['DateTime']>;
  /** The ID of the field that owns the neo block. */
  fieldId?: Maybe<Scalars['Int']>;
  /** The Neo block's level. */
  level?: Maybe<Scalars['Int']>;
  /** The ID of the element that owns the neo block. */
  ownerId?: Maybe<Scalars['Int']>;
  /** The ID of the neo block's type. */
  typeId?: Maybe<Scalars['Int']>;
  /** The handle of the neo block's type. */
  typeHandle?: Maybe<Scalars['String']>;
  text?: Maybe<Scalars['String']>;
  /** The children block types for this block */
  children?: Maybe<Array<Maybe<NeoBlockInterface>>>;
};


export type Cta_Cta_BlockType_CountArgs = {
  field: Scalars['String'];
};

export type Cta_Link_BlockType = NeoBlockInterface & ElementInterface & {
  /** The id of the entity */
  id?: Maybe<Scalars['ID']>;
  /** The uid of the entity */
  uid?: Maybe<Scalars['String']>;
  /** Return a number of related elements for a field. */
  _count?: Maybe<Scalars['Int']>;
  /** The element’s title. */
  title?: Maybe<Scalars['String']>;
  /** The element’s slug. */
  slug?: Maybe<Scalars['String']>;
  /** The element’s URI. */
  uri?: Maybe<Scalars['String']>;
  /** Whether the element is enabled or not. */
  enabled?: Maybe<Scalars['Boolean']>;
  /** Whether the element is archived or not. */
  archived?: Maybe<Scalars['Boolean']>;
  /** The ID of the site the element is associated with. */
  siteId?: Maybe<Scalars['Int']>;
  /** The unique identifier for an element-site relation. */
  siteSettingsId?: Maybe<Scalars['ID']>;
  /** The language of the site element is associated with. */
  language?: Maybe<Scalars['String']>;
  /** The element’s search score, if the `search` parameter was used when querying for the element. */
  searchScore?: Maybe<Scalars['String']>;
  /** Whether the element has been soft-deleted or not. */
  trashed?: Maybe<Scalars['Boolean']>;
  /** The element's status. */
  status?: Maybe<Scalars['String']>;
  /** The date the element was created. */
  dateCreated?: Maybe<Scalars['DateTime']>;
  /** The date the element was last updated. */
  dateUpdated?: Maybe<Scalars['DateTime']>;
  /** The ID of the field that owns the neo block. */
  fieldId?: Maybe<Scalars['Int']>;
  /** The Neo block's level. */
  level?: Maybe<Scalars['Int']>;
  /** The ID of the element that owns the neo block. */
  ownerId?: Maybe<Scalars['Int']>;
  /** The ID of the neo block's type. */
  typeId?: Maybe<Scalars['Int']>;
  /** The handle of the neo block's type. */
  typeHandle?: Maybe<Scalars['String']>;
  baseLink?: Maybe<LinkField_Link>;
  text?: Maybe<Scalars['String']>;
};


export type Cta_Link_BlockType_CountArgs = {
  field: Scalars['String'];
};

export type FactsStatsBlocks_NeoField = FactsStatsBlocks_Image_BlockType | FactsStatsBlocks_TextWithBackground_BlockType | FactsStatsBlocks_RichText_BlockType;

export type FactsStatsBlocks_Image_BlockType = NeoBlockInterface & ElementInterface & {
  /** The id of the entity */
  id?: Maybe<Scalars['ID']>;
  /** The uid of the entity */
  uid?: Maybe<Scalars['String']>;
  /** Return a number of related elements for a field. */
  _count?: Maybe<Scalars['Int']>;
  /** The element’s title. */
  title?: Maybe<Scalars['String']>;
  /** The element’s slug. */
  slug?: Maybe<Scalars['String']>;
  /** The element’s URI. */
  uri?: Maybe<Scalars['String']>;
  /** Whether the element is enabled or not. */
  enabled?: Maybe<Scalars['Boolean']>;
  /** Whether the element is archived or not. */
  archived?: Maybe<Scalars['Boolean']>;
  /** The ID of the site the element is associated with. */
  siteId?: Maybe<Scalars['Int']>;
  /** The unique identifier for an element-site relation. */
  siteSettingsId?: Maybe<Scalars['ID']>;
  /** The language of the site element is associated with. */
  language?: Maybe<Scalars['String']>;
  /** The element’s search score, if the `search` parameter was used when querying for the element. */
  searchScore?: Maybe<Scalars['String']>;
  /** Whether the element has been soft-deleted or not. */
  trashed?: Maybe<Scalars['Boolean']>;
  /** The element's status. */
  status?: Maybe<Scalars['String']>;
  /** The date the element was created. */
  dateCreated?: Maybe<Scalars['DateTime']>;
  /** The date the element was last updated. */
  dateUpdated?: Maybe<Scalars['DateTime']>;
  /** The ID of the field that owns the neo block. */
  fieldId?: Maybe<Scalars['Int']>;
  /** The Neo block's level. */
  level?: Maybe<Scalars['Int']>;
  /** The ID of the element that owns the neo block. */
  ownerId?: Maybe<Scalars['Int']>;
  /** The ID of the neo block's type. */
  typeId?: Maybe<Scalars['Int']>;
  /** The handle of the neo block's type. */
  typeHandle?: Maybe<Scalars['String']>;
  image?: Maybe<Array<Maybe<AssetInterface>>>;
};


export type FactsStatsBlocks_Image_BlockType_CountArgs = {
  field: Scalars['String'];
};


export type FactsStatsBlocks_Image_BlockTypeImageArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  volumeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  volume?: Maybe<Array<Maybe<Scalars['String']>>>;
  folderId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  filename?: Maybe<Array<Maybe<Scalars['String']>>>;
  kind?: Maybe<Array<Maybe<Scalars['String']>>>;
  height?: Maybe<Array<Maybe<Scalars['String']>>>;
  width?: Maybe<Array<Maybe<Scalars['String']>>>;
  size?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateModified?: Maybe<Scalars['String']>;
  includeSubfolders?: Maybe<Scalars['Boolean']>;
  withTransforms?: Maybe<Array<Maybe<Scalars['String']>>>;
  uploader?: Maybe<Scalars['QueryArgument']>;
};

export type FactsStatsBlocks_RichText_BlockType = NeoBlockInterface & ElementInterface & {
  /** The id of the entity */
  id?: Maybe<Scalars['ID']>;
  /** The uid of the entity */
  uid?: Maybe<Scalars['String']>;
  /** Return a number of related elements for a field. */
  _count?: Maybe<Scalars['Int']>;
  /** The element’s title. */
  title?: Maybe<Scalars['String']>;
  /** The element’s slug. */
  slug?: Maybe<Scalars['String']>;
  /** The element’s URI. */
  uri?: Maybe<Scalars['String']>;
  /** Whether the element is enabled or not. */
  enabled?: Maybe<Scalars['Boolean']>;
  /** Whether the element is archived or not. */
  archived?: Maybe<Scalars['Boolean']>;
  /** The ID of the site the element is associated with. */
  siteId?: Maybe<Scalars['Int']>;
  /** The unique identifier for an element-site relation. */
  siteSettingsId?: Maybe<Scalars['ID']>;
  /** The language of the site element is associated with. */
  language?: Maybe<Scalars['String']>;
  /** The element’s search score, if the `search` parameter was used when querying for the element. */
  searchScore?: Maybe<Scalars['String']>;
  /** Whether the element has been soft-deleted or not. */
  trashed?: Maybe<Scalars['Boolean']>;
  /** The element's status. */
  status?: Maybe<Scalars['String']>;
  /** The date the element was created. */
  dateCreated?: Maybe<Scalars['DateTime']>;
  /** The date the element was last updated. */
  dateUpdated?: Maybe<Scalars['DateTime']>;
  /** The ID of the field that owns the neo block. */
  fieldId?: Maybe<Scalars['Int']>;
  /** The Neo block's level. */
  level?: Maybe<Scalars['Int']>;
  /** The ID of the element that owns the neo block. */
  ownerId?: Maybe<Scalars['Int']>;
  /** The ID of the neo block's type. */
  typeId?: Maybe<Scalars['Int']>;
  /** The handle of the neo block's type. */
  typeHandle?: Maybe<Scalars['String']>;
  richText?: Maybe<Scalars['String']>;
};


export type FactsStatsBlocks_RichText_BlockType_CountArgs = {
  field: Scalars['String'];
};

export type FactsStatsBlocks_TextWithBackground_BlockType = NeoBlockInterface & ElementInterface & {
  /** The id of the entity */
  id?: Maybe<Scalars['ID']>;
  /** The uid of the entity */
  uid?: Maybe<Scalars['String']>;
  /** Return a number of related elements for a field. */
  _count?: Maybe<Scalars['Int']>;
  /** The element’s title. */
  title?: Maybe<Scalars['String']>;
  /** The element’s slug. */
  slug?: Maybe<Scalars['String']>;
  /** The element’s URI. */
  uri?: Maybe<Scalars['String']>;
  /** Whether the element is enabled or not. */
  enabled?: Maybe<Scalars['Boolean']>;
  /** Whether the element is archived or not. */
  archived?: Maybe<Scalars['Boolean']>;
  /** The ID of the site the element is associated with. */
  siteId?: Maybe<Scalars['Int']>;
  /** The unique identifier for an element-site relation. */
  siteSettingsId?: Maybe<Scalars['ID']>;
  /** The language of the site element is associated with. */
  language?: Maybe<Scalars['String']>;
  /** The element’s search score, if the `search` parameter was used when querying for the element. */
  searchScore?: Maybe<Scalars['String']>;
  /** Whether the element has been soft-deleted or not. */
  trashed?: Maybe<Scalars['Boolean']>;
  /** The element's status. */
  status?: Maybe<Scalars['String']>;
  /** The date the element was created. */
  dateCreated?: Maybe<Scalars['DateTime']>;
  /** The date the element was last updated. */
  dateUpdated?: Maybe<Scalars['DateTime']>;
  /** The ID of the field that owns the neo block. */
  fieldId?: Maybe<Scalars['Int']>;
  /** The Neo block's level. */
  level?: Maybe<Scalars['Int']>;
  /** The ID of the element that owns the neo block. */
  ownerId?: Maybe<Scalars['Int']>;
  /** The ID of the neo block's type. */
  typeId?: Maybe<Scalars['Int']>;
  /** The handle of the neo block's type. */
  typeHandle?: Maybe<Scalars['String']>;
  textWithLineBreaks?: Maybe<Scalars['String']>;
};


export type FactsStatsBlocks_TextWithBackground_BlockType_CountArgs = {
  field: Scalars['String'];
};

export type FactsStats_FactsStats_Entry = ElementInterface & EntryInterface & {
  /** The id of the entity */
  id?: Maybe<Scalars['ID']>;
  /** The uid of the entity */
  uid?: Maybe<Scalars['String']>;
  /** Return a number of related elements for a field. */
  _count?: Maybe<Scalars['Int']>;
  /** The element’s title. */
  title?: Maybe<Scalars['String']>;
  /** The element’s slug. */
  slug?: Maybe<Scalars['String']>;
  /** The element’s URI. */
  uri?: Maybe<Scalars['String']>;
  /** Whether the element is enabled or not. */
  enabled?: Maybe<Scalars['Boolean']>;
  /** Whether the element is archived or not. */
  archived?: Maybe<Scalars['Boolean']>;
  /** The ID of the site the element is associated with. */
  siteId?: Maybe<Scalars['Int']>;
  /** The unique identifier for an element-site relation. */
  siteSettingsId?: Maybe<Scalars['ID']>;
  /** The language of the site element is associated with. */
  language?: Maybe<Scalars['String']>;
  /** The element’s search score, if the `search` parameter was used when querying for the element. */
  searchScore?: Maybe<Scalars['String']>;
  /** Whether the element has been soft-deleted or not. */
  trashed?: Maybe<Scalars['Boolean']>;
  /** The element's status. */
  status?: Maybe<Scalars['String']>;
  /** The date the element was created. */
  dateCreated?: Maybe<Scalars['DateTime']>;
  /** The date the element was last updated. */
  dateUpdated?: Maybe<Scalars['DateTime']>;
  /** The element’s left position within its structure. */
  lft?: Maybe<Scalars['Int']>;
  /** The element’s right position within its structure. */
  rgt?: Maybe<Scalars['Int']>;
  /** The element’s level within its structure */
  level?: Maybe<Scalars['Int']>;
  /** The element’s structure’s root ID */
  root?: Maybe<Scalars['Int']>;
  /** The element’s structure ID. */
  structureId?: Maybe<Scalars['Int']>;
  /** Returns whether this is a draft. */
  isDraft?: Maybe<Scalars['Boolean']>;
  /** Returns whether this is a revision. */
  isRevision?: Maybe<Scalars['Boolean']>;
  /** The ID of the draft to return (from the `drafts` table) */
  draftId?: Maybe<Scalars['Int']>;
  /** Returns whether this is an unpublished draft. */
  isUnpublishedDraft?: Maybe<Scalars['Boolean']>;
  /** Returns whether this is an unpublished draft. **This field is deprecated.** `isUnpublishedDraft` should be used instead. */
  isUnsavedDraft?: Maybe<Scalars['Boolean']>;
  /** The name of the draft. */
  draftName?: Maybe<Scalars['String']>;
  /** The notes for the draft. */
  draftNotes?: Maybe<Scalars['String']>;
  /** Returns the entry’s canonical ID. */
  canonicalId?: Maybe<Scalars['Int']>;
  /** Returns the entry’s canonical UUID. */
  canonicalUid?: Maybe<Scalars['String']>;
  /**
   * Returns the entry’s canonical ID.
   * @deprecated this field has been deprecated since Craft 3.7.7. Use `canonicalId` instead.
   */
  sourceId?: Maybe<Scalars['Int']>;
  /**
   * Returns the entry’s canonical UUID.
   * @deprecated this field has been deprecated since Craft 3.7.7. Use `canonicalUid` instead.
   */
  sourceUid?: Maybe<Scalars['String']>;
  /** The ID of the section that contains the entry. */
  sectionId?: Maybe<Scalars['Int']>;
  /** The handle of the section that contains the entry. */
  sectionHandle?: Maybe<Scalars['String']>;
  /** The ID of the entry type that contains the entry. */
  typeId?: Maybe<Scalars['Int']>;
  /** The handle of the entry type that contains the entry. */
  typeHandle?: Maybe<Scalars['String']>;
  /** The entry's post date. */
  postDate?: Maybe<Scalars['DateTime']>;
  /** The expiry date of the entry. */
  expiryDate?: Maybe<Scalars['DateTime']>;
  /** The entry’s children, if the section is a structure. Accepts the same arguments as the `entries` query. */
  children?: Maybe<Array<Maybe<EntryInterface>>>;
  /** The entry’s descendants, if the section is a structure. Accepts the same arguments as the `entries` query. */
  descendants?: Maybe<Array<Maybe<EntryInterface>>>;
  /** The entry’s parent, if the section is a structure. */
  parent?: Maybe<EntryInterface>;
  /** The entry’s ancestors, if the section is a structure. Accepts the same arguments as the `entries` query. */
  ancestors?: Maybe<Array<Maybe<EntryInterface>>>;
  /** The element’s full URL */
  url?: Maybe<Scalars['String']>;
  /** The same element in other locales. */
  localized?: Maybe<Array<Maybe<EntryInterface>>>;
  /** Returns the previous element relative to this one, from a given set of criteria. */
  prev?: Maybe<EntryInterface>;
  /** Returns the next element relative to this one, from a given set of criteria. */
  next?: Maybe<EntryInterface>;
  seo?: Maybe<Array<Maybe<Seo_MatrixField>>>;
  image?: Maybe<Array<Maybe<AssetInterface>>>;
  factsStatsBlocks?: Maybe<Array<Maybe<FactsStatsBlocks_NeoField>>>;
};


export type FactsStats_FactsStats_Entry_CountArgs = {
  field: Scalars['String'];
};


export type FactsStats_FactsStats_EntryChildrenArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type FactsStats_FactsStats_EntryDescendantsArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type FactsStats_FactsStats_EntryParentArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type FactsStats_FactsStats_EntryAncestorsArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type FactsStats_FactsStats_EntryLocalizedArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type FactsStats_FactsStats_EntryPrevArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type FactsStats_FactsStats_EntryNextArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type FactsStats_FactsStats_EntrySeoArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  fieldId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ownerId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type FactsStats_FactsStats_EntryImageArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  volumeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  volume?: Maybe<Array<Maybe<Scalars['String']>>>;
  folderId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  filename?: Maybe<Array<Maybe<Scalars['String']>>>;
  kind?: Maybe<Array<Maybe<Scalars['String']>>>;
  height?: Maybe<Array<Maybe<Scalars['String']>>>;
  width?: Maybe<Array<Maybe<Scalars['String']>>>;
  size?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateModified?: Maybe<Scalars['String']>;
  includeSubfolders?: Maybe<Scalars['Boolean']>;
  withTransforms?: Maybe<Array<Maybe<Scalars['String']>>>;
  uploader?: Maybe<Scalars['QueryArgument']>;
};


export type FactsStats_FactsStats_EntryFactsStatsBlocksArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  fieldId?: Maybe<Array<Maybe<Scalars['Int']>>>;
  ownerId?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['Int']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  level?: Maybe<Scalars['Int']>;
};

export type Footer_GlobalSet = ElementInterface & GlobalSetInterface & {
  /** The id of the entity */
  id?: Maybe<Scalars['ID']>;
  /** The uid of the entity */
  uid?: Maybe<Scalars['String']>;
  /** Return a number of related elements for a field. */
  _count?: Maybe<Scalars['Int']>;
  /** The element’s title. */
  title?: Maybe<Scalars['String']>;
  /** The element’s slug. */
  slug?: Maybe<Scalars['String']>;
  /** The element’s URI. */
  uri?: Maybe<Scalars['String']>;
  /** Whether the element is enabled or not. */
  enabled?: Maybe<Scalars['Boolean']>;
  /** Whether the element is archived or not. */
  archived?: Maybe<Scalars['Boolean']>;
  /** The ID of the site the element is associated with. */
  siteId?: Maybe<Scalars['Int']>;
  /** The unique identifier for an element-site relation. */
  siteSettingsId?: Maybe<Scalars['ID']>;
  /** The language of the site element is associated with. */
  language?: Maybe<Scalars['String']>;
  /** The element’s search score, if the `search` parameter was used when querying for the element. */
  searchScore?: Maybe<Scalars['String']>;
  /** Whether the element has been soft-deleted or not. */
  trashed?: Maybe<Scalars['Boolean']>;
  /** The element's status. */
  status?: Maybe<Scalars['String']>;
  /** The date the element was created. */
  dateCreated?: Maybe<Scalars['DateTime']>;
  /** The date the element was last updated. */
  dateUpdated?: Maybe<Scalars['DateTime']>;
  /** The name of the global set. */
  name?: Maybe<Scalars['String']>;
  /** The handle of the global set. */
  handle?: Maybe<Scalars['String']>;
  cta?: Maybe<Array<Maybe<Cta_NeoField>>>;
  textWithLineBreaks?: Maybe<Scalars['String']>;
};


export type Footer_GlobalSet_CountArgs = {
  field: Scalars['String'];
};


export type Footer_GlobalSetCtaArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  fieldId?: Maybe<Array<Maybe<Scalars['Int']>>>;
  ownerId?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['Int']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  level?: Maybe<Scalars['Int']>;
};

export type Hero_MatrixField = Hero_Hero_BlockType;

export type Hero_Hero_BlockType = ElementInterface & MatrixBlockInterface & {
  /** The id of the entity */
  id?: Maybe<Scalars['ID']>;
  /** The uid of the entity */
  uid?: Maybe<Scalars['String']>;
  /** Return a number of related elements for a field. */
  _count?: Maybe<Scalars['Int']>;
  /** The element’s title. */
  title?: Maybe<Scalars['String']>;
  /** The element’s slug. */
  slug?: Maybe<Scalars['String']>;
  /** The element’s URI. */
  uri?: Maybe<Scalars['String']>;
  /** Whether the element is enabled or not. */
  enabled?: Maybe<Scalars['Boolean']>;
  /** Whether the element is archived or not. */
  archived?: Maybe<Scalars['Boolean']>;
  /** The ID of the site the element is associated with. */
  siteId?: Maybe<Scalars['Int']>;
  /** The unique identifier for an element-site relation. */
  siteSettingsId?: Maybe<Scalars['ID']>;
  /** The language of the site element is associated with. */
  language?: Maybe<Scalars['String']>;
  /** The element’s search score, if the `search` parameter was used when querying for the element. */
  searchScore?: Maybe<Scalars['String']>;
  /** Whether the element has been soft-deleted or not. */
  trashed?: Maybe<Scalars['Boolean']>;
  /** The element's status. */
  status?: Maybe<Scalars['String']>;
  /** The date the element was created. */
  dateCreated?: Maybe<Scalars['DateTime']>;
  /** The date the element was last updated. */
  dateUpdated?: Maybe<Scalars['DateTime']>;
  /** The ID of the field that owns the matrix block. */
  fieldId?: Maybe<Scalars['Int']>;
  /** The ID of the element that owns the matrix block. */
  ownerId?: Maybe<Scalars['Int']>;
  /** The ID of the matrix block's type. */
  typeId?: Maybe<Scalars['Int']>;
  /** The handle of the matrix block's type. */
  typeHandle?: Maybe<Scalars['String']>;
  /** The sort order of the matrix block within the owner element field. */
  sortOrder?: Maybe<Scalars['Int']>;
  image?: Maybe<Array<Maybe<AssetInterface>>>;
  text?: Maybe<Scalars['String']>;
};


export type Hero_Hero_BlockType_CountArgs = {
  field: Scalars['String'];
};


export type Hero_Hero_BlockTypeImageArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  volumeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  volume?: Maybe<Array<Maybe<Scalars['String']>>>;
  folderId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  filename?: Maybe<Array<Maybe<Scalars['String']>>>;
  kind?: Maybe<Array<Maybe<Scalars['String']>>>;
  height?: Maybe<Array<Maybe<Scalars['String']>>>;
  width?: Maybe<Array<Maybe<Scalars['String']>>>;
  size?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateModified?: Maybe<Scalars['String']>;
  includeSubfolders?: Maybe<Scalars['Boolean']>;
  withTransforms?: Maybe<Array<Maybe<Scalars['String']>>>;
  uploader?: Maybe<Scalars['QueryArgument']>;
};

export type Home_Home_Entry = ElementInterface & EntryInterface & {
  /** The id of the entity */
  id?: Maybe<Scalars['ID']>;
  /** The uid of the entity */
  uid?: Maybe<Scalars['String']>;
  /** Return a number of related elements for a field. */
  _count?: Maybe<Scalars['Int']>;
  /** The element’s title. */
  title?: Maybe<Scalars['String']>;
  /** The element’s slug. */
  slug?: Maybe<Scalars['String']>;
  /** The element’s URI. */
  uri?: Maybe<Scalars['String']>;
  /** Whether the element is enabled or not. */
  enabled?: Maybe<Scalars['Boolean']>;
  /** Whether the element is archived or not. */
  archived?: Maybe<Scalars['Boolean']>;
  /** The ID of the site the element is associated with. */
  siteId?: Maybe<Scalars['Int']>;
  /** The unique identifier for an element-site relation. */
  siteSettingsId?: Maybe<Scalars['ID']>;
  /** The language of the site element is associated with. */
  language?: Maybe<Scalars['String']>;
  /** The element’s search score, if the `search` parameter was used when querying for the element. */
  searchScore?: Maybe<Scalars['String']>;
  /** Whether the element has been soft-deleted or not. */
  trashed?: Maybe<Scalars['Boolean']>;
  /** The element's status. */
  status?: Maybe<Scalars['String']>;
  /** The date the element was created. */
  dateCreated?: Maybe<Scalars['DateTime']>;
  /** The date the element was last updated. */
  dateUpdated?: Maybe<Scalars['DateTime']>;
  /** The element’s left position within its structure. */
  lft?: Maybe<Scalars['Int']>;
  /** The element’s right position within its structure. */
  rgt?: Maybe<Scalars['Int']>;
  /** The element’s level within its structure */
  level?: Maybe<Scalars['Int']>;
  /** The element’s structure’s root ID */
  root?: Maybe<Scalars['Int']>;
  /** The element’s structure ID. */
  structureId?: Maybe<Scalars['Int']>;
  /** Returns whether this is a draft. */
  isDraft?: Maybe<Scalars['Boolean']>;
  /** Returns whether this is a revision. */
  isRevision?: Maybe<Scalars['Boolean']>;
  /** The ID of the draft to return (from the `drafts` table) */
  draftId?: Maybe<Scalars['Int']>;
  /** Returns whether this is an unpublished draft. */
  isUnpublishedDraft?: Maybe<Scalars['Boolean']>;
  /** Returns whether this is an unpublished draft. **This field is deprecated.** `isUnpublishedDraft` should be used instead. */
  isUnsavedDraft?: Maybe<Scalars['Boolean']>;
  /** The name of the draft. */
  draftName?: Maybe<Scalars['String']>;
  /** The notes for the draft. */
  draftNotes?: Maybe<Scalars['String']>;
  /** Returns the entry’s canonical ID. */
  canonicalId?: Maybe<Scalars['Int']>;
  /** Returns the entry’s canonical UUID. */
  canonicalUid?: Maybe<Scalars['String']>;
  /**
   * Returns the entry’s canonical ID.
   * @deprecated this field has been deprecated since Craft 3.7.7. Use `canonicalId` instead.
   */
  sourceId?: Maybe<Scalars['Int']>;
  /**
   * Returns the entry’s canonical UUID.
   * @deprecated this field has been deprecated since Craft 3.7.7. Use `canonicalUid` instead.
   */
  sourceUid?: Maybe<Scalars['String']>;
  /** The ID of the section that contains the entry. */
  sectionId?: Maybe<Scalars['Int']>;
  /** The handle of the section that contains the entry. */
  sectionHandle?: Maybe<Scalars['String']>;
  /** The ID of the entry type that contains the entry. */
  typeId?: Maybe<Scalars['Int']>;
  /** The handle of the entry type that contains the entry. */
  typeHandle?: Maybe<Scalars['String']>;
  /** The entry's post date. */
  postDate?: Maybe<Scalars['DateTime']>;
  /** The expiry date of the entry. */
  expiryDate?: Maybe<Scalars['DateTime']>;
  /** The entry’s children, if the section is a structure. Accepts the same arguments as the `entries` query. */
  children?: Maybe<Array<Maybe<EntryInterface>>>;
  /** The entry’s descendants, if the section is a structure. Accepts the same arguments as the `entries` query. */
  descendants?: Maybe<Array<Maybe<EntryInterface>>>;
  /** The entry’s parent, if the section is a structure. */
  parent?: Maybe<EntryInterface>;
  /** The entry’s ancestors, if the section is a structure. Accepts the same arguments as the `entries` query. */
  ancestors?: Maybe<Array<Maybe<EntryInterface>>>;
  /** The element’s full URL */
  url?: Maybe<Scalars['String']>;
  /** The same element in other locales. */
  localized?: Maybe<Array<Maybe<EntryInterface>>>;
  /** Returns the previous element relative to this one, from a given set of criteria. */
  prev?: Maybe<EntryInterface>;
  /** Returns the next element relative to this one, from a given set of criteria. */
  next?: Maybe<EntryInterface>;
  seo?: Maybe<Array<Maybe<Seo_MatrixField>>>;
  slides?: Maybe<Array<Maybe<Slides_MatrixField>>>;
  interval?: Maybe<Scalars['Number']>;
  cta?: Maybe<Array<Maybe<Cta_NeoField>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<EntryInterface>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<EntryInterface>>>;
};


export type Home_Home_Entry_CountArgs = {
  field: Scalars['String'];
};


export type Home_Home_EntryChildrenArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Home_Home_EntryDescendantsArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Home_Home_EntryParentArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Home_Home_EntryAncestorsArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Home_Home_EntryLocalizedArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Home_Home_EntryPrevArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Home_Home_EntryNextArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Home_Home_EntrySeoArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  fieldId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ownerId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Home_Home_EntrySlidesArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  fieldId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ownerId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Home_Home_EntryCtaArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  fieldId?: Maybe<Array<Maybe<Scalars['Int']>>>;
  ownerId?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['Int']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  level?: Maybe<Scalars['Int']>;
};


export type Home_Home_EntryNewsStoriesFeaturedArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Home_Home_EntryNewsStoriesLatestArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type Join_Join_Entry = ElementInterface & EntryInterface & {
  /** The id of the entity */
  id?: Maybe<Scalars['ID']>;
  /** The uid of the entity */
  uid?: Maybe<Scalars['String']>;
  /** Return a number of related elements for a field. */
  _count?: Maybe<Scalars['Int']>;
  /** The element’s title. */
  title?: Maybe<Scalars['String']>;
  /** The element’s slug. */
  slug?: Maybe<Scalars['String']>;
  /** The element’s URI. */
  uri?: Maybe<Scalars['String']>;
  /** Whether the element is enabled or not. */
  enabled?: Maybe<Scalars['Boolean']>;
  /** Whether the element is archived or not. */
  archived?: Maybe<Scalars['Boolean']>;
  /** The ID of the site the element is associated with. */
  siteId?: Maybe<Scalars['Int']>;
  /** The unique identifier for an element-site relation. */
  siteSettingsId?: Maybe<Scalars['ID']>;
  /** The language of the site element is associated with. */
  language?: Maybe<Scalars['String']>;
  /** The element’s search score, if the `search` parameter was used when querying for the element. */
  searchScore?: Maybe<Scalars['String']>;
  /** Whether the element has been soft-deleted or not. */
  trashed?: Maybe<Scalars['Boolean']>;
  /** The element's status. */
  status?: Maybe<Scalars['String']>;
  /** The date the element was created. */
  dateCreated?: Maybe<Scalars['DateTime']>;
  /** The date the element was last updated. */
  dateUpdated?: Maybe<Scalars['DateTime']>;
  /** The element’s left position within its structure. */
  lft?: Maybe<Scalars['Int']>;
  /** The element’s right position within its structure. */
  rgt?: Maybe<Scalars['Int']>;
  /** The element’s level within its structure */
  level?: Maybe<Scalars['Int']>;
  /** The element’s structure’s root ID */
  root?: Maybe<Scalars['Int']>;
  /** The element’s structure ID. */
  structureId?: Maybe<Scalars['Int']>;
  /** Returns whether this is a draft. */
  isDraft?: Maybe<Scalars['Boolean']>;
  /** Returns whether this is a revision. */
  isRevision?: Maybe<Scalars['Boolean']>;
  /** The ID of the draft to return (from the `drafts` table) */
  draftId?: Maybe<Scalars['Int']>;
  /** Returns whether this is an unpublished draft. */
  isUnpublishedDraft?: Maybe<Scalars['Boolean']>;
  /** Returns whether this is an unpublished draft. **This field is deprecated.** `isUnpublishedDraft` should be used instead. */
  isUnsavedDraft?: Maybe<Scalars['Boolean']>;
  /** The name of the draft. */
  draftName?: Maybe<Scalars['String']>;
  /** The notes for the draft. */
  draftNotes?: Maybe<Scalars['String']>;
  /** Returns the entry’s canonical ID. */
  canonicalId?: Maybe<Scalars['Int']>;
  /** Returns the entry’s canonical UUID. */
  canonicalUid?: Maybe<Scalars['String']>;
  /**
   * Returns the entry’s canonical ID.
   * @deprecated this field has been deprecated since Craft 3.7.7. Use `canonicalId` instead.
   */
  sourceId?: Maybe<Scalars['Int']>;
  /**
   * Returns the entry’s canonical UUID.
   * @deprecated this field has been deprecated since Craft 3.7.7. Use `canonicalUid` instead.
   */
  sourceUid?: Maybe<Scalars['String']>;
  /** The ID of the section that contains the entry. */
  sectionId?: Maybe<Scalars['Int']>;
  /** The handle of the section that contains the entry. */
  sectionHandle?: Maybe<Scalars['String']>;
  /** The ID of the entry type that contains the entry. */
  typeId?: Maybe<Scalars['Int']>;
  /** The handle of the entry type that contains the entry. */
  typeHandle?: Maybe<Scalars['String']>;
  /** The entry's post date. */
  postDate?: Maybe<Scalars['DateTime']>;
  /** The expiry date of the entry. */
  expiryDate?: Maybe<Scalars['DateTime']>;
  /** The entry’s children, if the section is a structure. Accepts the same arguments as the `entries` query. */
  children?: Maybe<Array<Maybe<EntryInterface>>>;
  /** The entry’s descendants, if the section is a structure. Accepts the same arguments as the `entries` query. */
  descendants?: Maybe<Array<Maybe<EntryInterface>>>;
  /** The entry’s parent, if the section is a structure. */
  parent?: Maybe<EntryInterface>;
  /** The entry’s ancestors, if the section is a structure. Accepts the same arguments as the `entries` query. */
  ancestors?: Maybe<Array<Maybe<EntryInterface>>>;
  /** The element’s full URL */
  url?: Maybe<Scalars['String']>;
  /** The same element in other locales. */
  localized?: Maybe<Array<Maybe<EntryInterface>>>;
  /** Returns the previous element relative to this one, from a given set of criteria. */
  prev?: Maybe<EntryInterface>;
  /** Returns the next element relative to this one, from a given set of criteria. */
  next?: Maybe<EntryInterface>;
  seo?: Maybe<Array<Maybe<Seo_MatrixField>>>;
  text?: Maybe<Scalars['String']>;
  image?: Maybe<Array<Maybe<AssetInterface>>>;
  textAdditional?: Maybe<Scalars['String']>;
  color?: Maybe<Scalars['String']>;
  textWithLineBreaks?: Maybe<Scalars['String']>;
  quote?: Maybe<Array<Maybe<Quote_MatrixField>>>;
  cta?: Maybe<Array<Maybe<Cta_NeoField>>>;
};


export type Join_Join_Entry_CountArgs = {
  field: Scalars['String'];
};


export type Join_Join_EntryChildrenArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Join_Join_EntryDescendantsArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Join_Join_EntryParentArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Join_Join_EntryAncestorsArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Join_Join_EntryLocalizedArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Join_Join_EntryPrevArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Join_Join_EntryNextArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Join_Join_EntrySeoArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  fieldId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ownerId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Join_Join_EntryImageArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  volumeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  volume?: Maybe<Array<Maybe<Scalars['String']>>>;
  folderId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  filename?: Maybe<Array<Maybe<Scalars['String']>>>;
  kind?: Maybe<Array<Maybe<Scalars['String']>>>;
  height?: Maybe<Array<Maybe<Scalars['String']>>>;
  width?: Maybe<Array<Maybe<Scalars['String']>>>;
  size?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateModified?: Maybe<Scalars['String']>;
  includeSubfolders?: Maybe<Scalars['Boolean']>;
  withTransforms?: Maybe<Array<Maybe<Scalars['String']>>>;
  uploader?: Maybe<Scalars['QueryArgument']>;
};


export type Join_Join_EntryQuoteArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  fieldId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ownerId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Join_Join_EntryCtaArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  fieldId?: Maybe<Array<Maybe<Scalars['Int']>>>;
  ownerId?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['Int']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  level?: Maybe<Scalars['Int']>;
};

/** This is the interface implemented by all links. */
export type LinkField_Link = {
  ariaLabel?: Maybe<Scalars['String']>;
  customText?: Maybe<Scalars['String']>;
  element?: Maybe<ElementInterface>;
  target?: Maybe<Scalars['String']>;
  text?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
};

export type Links_MatrixField = Links_Item_BlockType;

export type Links_Item_BlockType = ElementInterface & MatrixBlockInterface & {
  /** The id of the entity */
  id?: Maybe<Scalars['ID']>;
  /** The uid of the entity */
  uid?: Maybe<Scalars['String']>;
  /** Return a number of related elements for a field. */
  _count?: Maybe<Scalars['Int']>;
  /** The element’s title. */
  title?: Maybe<Scalars['String']>;
  /** The element’s slug. */
  slug?: Maybe<Scalars['String']>;
  /** The element’s URI. */
  uri?: Maybe<Scalars['String']>;
  /** Whether the element is enabled or not. */
  enabled?: Maybe<Scalars['Boolean']>;
  /** Whether the element is archived or not. */
  archived?: Maybe<Scalars['Boolean']>;
  /** The ID of the site the element is associated with. */
  siteId?: Maybe<Scalars['Int']>;
  /** The unique identifier for an element-site relation. */
  siteSettingsId?: Maybe<Scalars['ID']>;
  /** The language of the site element is associated with. */
  language?: Maybe<Scalars['String']>;
  /** The element’s search score, if the `search` parameter was used when querying for the element. */
  searchScore?: Maybe<Scalars['String']>;
  /** Whether the element has been soft-deleted or not. */
  trashed?: Maybe<Scalars['Boolean']>;
  /** The element's status. */
  status?: Maybe<Scalars['String']>;
  /** The date the element was created. */
  dateCreated?: Maybe<Scalars['DateTime']>;
  /** The date the element was last updated. */
  dateUpdated?: Maybe<Scalars['DateTime']>;
  /** The ID of the field that owns the matrix block. */
  fieldId?: Maybe<Scalars['Int']>;
  /** The ID of the element that owns the matrix block. */
  ownerId?: Maybe<Scalars['Int']>;
  /** The ID of the matrix block's type. */
  typeId?: Maybe<Scalars['Int']>;
  /** The handle of the matrix block's type. */
  typeHandle?: Maybe<Scalars['String']>;
  /** The sort order of the matrix block within the owner element field. */
  sortOrder?: Maybe<Scalars['Int']>;
  itemLink?: Maybe<LinkField_Link>;
};


export type Links_Item_BlockType_CountArgs = {
  field: Scalars['String'];
};

export type Message_MatrixField = Message_Message_BlockType;

export type Message_Message_BlockType = ElementInterface & MatrixBlockInterface & {
  /** The id of the entity */
  id?: Maybe<Scalars['ID']>;
  /** The uid of the entity */
  uid?: Maybe<Scalars['String']>;
  /** Return a number of related elements for a field. */
  _count?: Maybe<Scalars['Int']>;
  /** The element’s title. */
  title?: Maybe<Scalars['String']>;
  /** The element’s slug. */
  slug?: Maybe<Scalars['String']>;
  /** The element’s URI. */
  uri?: Maybe<Scalars['String']>;
  /** Whether the element is enabled or not. */
  enabled?: Maybe<Scalars['Boolean']>;
  /** Whether the element is archived or not. */
  archived?: Maybe<Scalars['Boolean']>;
  /** The ID of the site the element is associated with. */
  siteId?: Maybe<Scalars['Int']>;
  /** The unique identifier for an element-site relation. */
  siteSettingsId?: Maybe<Scalars['ID']>;
  /** The language of the site element is associated with. */
  language?: Maybe<Scalars['String']>;
  /** The element’s search score, if the `search` parameter was used when querying for the element. */
  searchScore?: Maybe<Scalars['String']>;
  /** Whether the element has been soft-deleted or not. */
  trashed?: Maybe<Scalars['Boolean']>;
  /** The element's status. */
  status?: Maybe<Scalars['String']>;
  /** The date the element was created. */
  dateCreated?: Maybe<Scalars['DateTime']>;
  /** The date the element was last updated. */
  dateUpdated?: Maybe<Scalars['DateTime']>;
  /** The ID of the field that owns the matrix block. */
  fieldId?: Maybe<Scalars['Int']>;
  /** The ID of the element that owns the matrix block. */
  ownerId?: Maybe<Scalars['Int']>;
  /** The ID of the matrix block's type. */
  typeId?: Maybe<Scalars['Int']>;
  /** The handle of the matrix block's type. */
  typeHandle?: Maybe<Scalars['String']>;
  /** The sort order of the matrix block within the owner element field. */
  sortOrder?: Maybe<Scalars['Int']>;
  titleMessage?: Maybe<Scalars['String']>;
  subtitle?: Maybe<Scalars['String']>;
  text?: Maybe<Scalars['String']>;
  caption?: Maybe<Scalars['String']>;
};


export type Message_Message_BlockType_CountArgs = {
  field: Scalars['String'];
};

export type MissionVision_MissionVision_Entry = ElementInterface & EntryInterface & {
  /** The id of the entity */
  id?: Maybe<Scalars['ID']>;
  /** The uid of the entity */
  uid?: Maybe<Scalars['String']>;
  /** Return a number of related elements for a field. */
  _count?: Maybe<Scalars['Int']>;
  /** The element’s title. */
  title?: Maybe<Scalars['String']>;
  /** The element’s slug. */
  slug?: Maybe<Scalars['String']>;
  /** The element’s URI. */
  uri?: Maybe<Scalars['String']>;
  /** Whether the element is enabled or not. */
  enabled?: Maybe<Scalars['Boolean']>;
  /** Whether the element is archived or not. */
  archived?: Maybe<Scalars['Boolean']>;
  /** The ID of the site the element is associated with. */
  siteId?: Maybe<Scalars['Int']>;
  /** The unique identifier for an element-site relation. */
  siteSettingsId?: Maybe<Scalars['ID']>;
  /** The language of the site element is associated with. */
  language?: Maybe<Scalars['String']>;
  /** The element’s search score, if the `search` parameter was used when querying for the element. */
  searchScore?: Maybe<Scalars['String']>;
  /** Whether the element has been soft-deleted or not. */
  trashed?: Maybe<Scalars['Boolean']>;
  /** The element's status. */
  status?: Maybe<Scalars['String']>;
  /** The date the element was created. */
  dateCreated?: Maybe<Scalars['DateTime']>;
  /** The date the element was last updated. */
  dateUpdated?: Maybe<Scalars['DateTime']>;
  /** The element’s left position within its structure. */
  lft?: Maybe<Scalars['Int']>;
  /** The element’s right position within its structure. */
  rgt?: Maybe<Scalars['Int']>;
  /** The element’s level within its structure */
  level?: Maybe<Scalars['Int']>;
  /** The element’s structure’s root ID */
  root?: Maybe<Scalars['Int']>;
  /** The element’s structure ID. */
  structureId?: Maybe<Scalars['Int']>;
  /** Returns whether this is a draft. */
  isDraft?: Maybe<Scalars['Boolean']>;
  /** Returns whether this is a revision. */
  isRevision?: Maybe<Scalars['Boolean']>;
  /** The ID of the draft to return (from the `drafts` table) */
  draftId?: Maybe<Scalars['Int']>;
  /** Returns whether this is an unpublished draft. */
  isUnpublishedDraft?: Maybe<Scalars['Boolean']>;
  /** Returns whether this is an unpublished draft. **This field is deprecated.** `isUnpublishedDraft` should be used instead. */
  isUnsavedDraft?: Maybe<Scalars['Boolean']>;
  /** The name of the draft. */
  draftName?: Maybe<Scalars['String']>;
  /** The notes for the draft. */
  draftNotes?: Maybe<Scalars['String']>;
  /** Returns the entry’s canonical ID. */
  canonicalId?: Maybe<Scalars['Int']>;
  /** Returns the entry’s canonical UUID. */
  canonicalUid?: Maybe<Scalars['String']>;
  /**
   * Returns the entry’s canonical ID.
   * @deprecated this field has been deprecated since Craft 3.7.7. Use `canonicalId` instead.
   */
  sourceId?: Maybe<Scalars['Int']>;
  /**
   * Returns the entry’s canonical UUID.
   * @deprecated this field has been deprecated since Craft 3.7.7. Use `canonicalUid` instead.
   */
  sourceUid?: Maybe<Scalars['String']>;
  /** The ID of the section that contains the entry. */
  sectionId?: Maybe<Scalars['Int']>;
  /** The handle of the section that contains the entry. */
  sectionHandle?: Maybe<Scalars['String']>;
  /** The ID of the entry type that contains the entry. */
  typeId?: Maybe<Scalars['Int']>;
  /** The handle of the entry type that contains the entry. */
  typeHandle?: Maybe<Scalars['String']>;
  /** The entry's post date. */
  postDate?: Maybe<Scalars['DateTime']>;
  /** The expiry date of the entry. */
  expiryDate?: Maybe<Scalars['DateTime']>;
  /** The entry’s children, if the section is a structure. Accepts the same arguments as the `entries` query. */
  children?: Maybe<Array<Maybe<EntryInterface>>>;
  /** The entry’s descendants, if the section is a structure. Accepts the same arguments as the `entries` query. */
  descendants?: Maybe<Array<Maybe<EntryInterface>>>;
  /** The entry’s parent, if the section is a structure. */
  parent?: Maybe<EntryInterface>;
  /** The entry’s ancestors, if the section is a structure. Accepts the same arguments as the `entries` query. */
  ancestors?: Maybe<Array<Maybe<EntryInterface>>>;
  /** The element’s full URL */
  url?: Maybe<Scalars['String']>;
  /** The same element in other locales. */
  localized?: Maybe<Array<Maybe<EntryInterface>>>;
  /** Returns the previous element relative to this one, from a given set of criteria. */
  prev?: Maybe<EntryInterface>;
  /** Returns the next element relative to this one, from a given set of criteria. */
  next?: Maybe<EntryInterface>;
  seo?: Maybe<Array<Maybe<Seo_MatrixField>>>;
  hero?: Maybe<Array<Maybe<Hero_MatrixField>>>;
  textWithLineBreaks?: Maybe<Scalars['String']>;
  quote?: Maybe<Array<Maybe<Quote_MatrixField>>>;
  message?: Maybe<Array<Maybe<Message_MatrixField>>>;
  text?: Maybe<Scalars['String']>;
  textAdditional?: Maybe<Scalars['String']>;
  pills?: Maybe<Array<Maybe<Pills_MatrixField>>>;
  historyTitle?: Maybe<Scalars['String']>;
  sliderVertical?: Maybe<Array<Maybe<SliderVertical_MatrixField>>>;
};


export type MissionVision_MissionVision_Entry_CountArgs = {
  field: Scalars['String'];
};


export type MissionVision_MissionVision_EntryChildrenArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type MissionVision_MissionVision_EntryDescendantsArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type MissionVision_MissionVision_EntryParentArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type MissionVision_MissionVision_EntryAncestorsArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type MissionVision_MissionVision_EntryLocalizedArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type MissionVision_MissionVision_EntryPrevArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type MissionVision_MissionVision_EntryNextArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type MissionVision_MissionVision_EntrySeoArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  fieldId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ownerId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type MissionVision_MissionVision_EntryHeroArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  fieldId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ownerId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type MissionVision_MissionVision_EntryQuoteArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  fieldId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ownerId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type MissionVision_MissionVision_EntryMessageArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  fieldId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ownerId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type MissionVision_MissionVision_EntryPillsArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  fieldId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ownerId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type MissionVision_MissionVision_EntrySliderVerticalArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  fieldId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ownerId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type NewsStories_NewsStories_Entry = ElementInterface & EntryInterface & {
  /** The id of the entity */
  id?: Maybe<Scalars['ID']>;
  /** The uid of the entity */
  uid?: Maybe<Scalars['String']>;
  /** Return a number of related elements for a field. */
  _count?: Maybe<Scalars['Int']>;
  /** The element’s title. */
  title?: Maybe<Scalars['String']>;
  /** The element’s slug. */
  slug?: Maybe<Scalars['String']>;
  /** The element’s URI. */
  uri?: Maybe<Scalars['String']>;
  /** Whether the element is enabled or not. */
  enabled?: Maybe<Scalars['Boolean']>;
  /** Whether the element is archived or not. */
  archived?: Maybe<Scalars['Boolean']>;
  /** The ID of the site the element is associated with. */
  siteId?: Maybe<Scalars['Int']>;
  /** The unique identifier for an element-site relation. */
  siteSettingsId?: Maybe<Scalars['ID']>;
  /** The language of the site element is associated with. */
  language?: Maybe<Scalars['String']>;
  /** The element’s search score, if the `search` parameter was used when querying for the element. */
  searchScore?: Maybe<Scalars['String']>;
  /** Whether the element has been soft-deleted or not. */
  trashed?: Maybe<Scalars['Boolean']>;
  /** The element's status. */
  status?: Maybe<Scalars['String']>;
  /** The date the element was created. */
  dateCreated?: Maybe<Scalars['DateTime']>;
  /** The date the element was last updated. */
  dateUpdated?: Maybe<Scalars['DateTime']>;
  /** The element’s left position within its structure. */
  lft?: Maybe<Scalars['Int']>;
  /** The element’s right position within its structure. */
  rgt?: Maybe<Scalars['Int']>;
  /** The element’s level within its structure */
  level?: Maybe<Scalars['Int']>;
  /** The element’s structure’s root ID */
  root?: Maybe<Scalars['Int']>;
  /** The element’s structure ID. */
  structureId?: Maybe<Scalars['Int']>;
  /** Returns whether this is a draft. */
  isDraft?: Maybe<Scalars['Boolean']>;
  /** Returns whether this is a revision. */
  isRevision?: Maybe<Scalars['Boolean']>;
  /** The ID of the draft to return (from the `drafts` table) */
  draftId?: Maybe<Scalars['Int']>;
  /** Returns whether this is an unpublished draft. */
  isUnpublishedDraft?: Maybe<Scalars['Boolean']>;
  /** Returns whether this is an unpublished draft. **This field is deprecated.** `isUnpublishedDraft` should be used instead. */
  isUnsavedDraft?: Maybe<Scalars['Boolean']>;
  /** The name of the draft. */
  draftName?: Maybe<Scalars['String']>;
  /** The notes for the draft. */
  draftNotes?: Maybe<Scalars['String']>;
  /** Returns the entry’s canonical ID. */
  canonicalId?: Maybe<Scalars['Int']>;
  /** Returns the entry’s canonical UUID. */
  canonicalUid?: Maybe<Scalars['String']>;
  /**
   * Returns the entry’s canonical ID.
   * @deprecated this field has been deprecated since Craft 3.7.7. Use `canonicalId` instead.
   */
  sourceId?: Maybe<Scalars['Int']>;
  /**
   * Returns the entry’s canonical UUID.
   * @deprecated this field has been deprecated since Craft 3.7.7. Use `canonicalUid` instead.
   */
  sourceUid?: Maybe<Scalars['String']>;
  /** The ID of the section that contains the entry. */
  sectionId?: Maybe<Scalars['Int']>;
  /** The handle of the section that contains the entry. */
  sectionHandle?: Maybe<Scalars['String']>;
  /** The ID of the entry type that contains the entry. */
  typeId?: Maybe<Scalars['Int']>;
  /** The handle of the entry type that contains the entry. */
  typeHandle?: Maybe<Scalars['String']>;
  /** The entry's post date. */
  postDate?: Maybe<Scalars['DateTime']>;
  /** The expiry date of the entry. */
  expiryDate?: Maybe<Scalars['DateTime']>;
  /** The entry’s children, if the section is a structure. Accepts the same arguments as the `entries` query. */
  children?: Maybe<Array<Maybe<EntryInterface>>>;
  /** The entry’s descendants, if the section is a structure. Accepts the same arguments as the `entries` query. */
  descendants?: Maybe<Array<Maybe<EntryInterface>>>;
  /** The entry’s parent, if the section is a structure. */
  parent?: Maybe<EntryInterface>;
  /** The entry’s ancestors, if the section is a structure. Accepts the same arguments as the `entries` query. */
  ancestors?: Maybe<Array<Maybe<EntryInterface>>>;
  /** The element’s full URL */
  url?: Maybe<Scalars['String']>;
  /** The same element in other locales. */
  localized?: Maybe<Array<Maybe<EntryInterface>>>;
  /** Returns the previous element relative to this one, from a given set of criteria. */
  prev?: Maybe<EntryInterface>;
  /** Returns the next element relative to this one, from a given set of criteria. */
  next?: Maybe<EntryInterface>;
  seo?: Maybe<Array<Maybe<Seo_MatrixField>>>;
};


export type NewsStories_NewsStories_Entry_CountArgs = {
  field: Scalars['String'];
};


export type NewsStories_NewsStories_EntryChildrenArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type NewsStories_NewsStories_EntryDescendantsArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type NewsStories_NewsStories_EntryParentArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type NewsStories_NewsStories_EntryAncestorsArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type NewsStories_NewsStories_EntryLocalizedArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type NewsStories_NewsStories_EntryPrevArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type NewsStories_NewsStories_EntryNextArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type NewsStories_NewsStories_EntrySeoArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  fieldId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ownerId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type People_Person_Entry = ElementInterface & EntryInterface & {
  /** The id of the entity */
  id?: Maybe<Scalars['ID']>;
  /** The uid of the entity */
  uid?: Maybe<Scalars['String']>;
  /** Return a number of related elements for a field. */
  _count?: Maybe<Scalars['Int']>;
  /** The element’s title. */
  title?: Maybe<Scalars['String']>;
  /** The element’s slug. */
  slug?: Maybe<Scalars['String']>;
  /** The element’s URI. */
  uri?: Maybe<Scalars['String']>;
  /** Whether the element is enabled or not. */
  enabled?: Maybe<Scalars['Boolean']>;
  /** Whether the element is archived or not. */
  archived?: Maybe<Scalars['Boolean']>;
  /** The ID of the site the element is associated with. */
  siteId?: Maybe<Scalars['Int']>;
  /** The unique identifier for an element-site relation. */
  siteSettingsId?: Maybe<Scalars['ID']>;
  /** The language of the site element is associated with. */
  language?: Maybe<Scalars['String']>;
  /** The element’s search score, if the `search` parameter was used when querying for the element. */
  searchScore?: Maybe<Scalars['String']>;
  /** Whether the element has been soft-deleted or not. */
  trashed?: Maybe<Scalars['Boolean']>;
  /** The element's status. */
  status?: Maybe<Scalars['String']>;
  /** The date the element was created. */
  dateCreated?: Maybe<Scalars['DateTime']>;
  /** The date the element was last updated. */
  dateUpdated?: Maybe<Scalars['DateTime']>;
  /** The element’s left position within its structure. */
  lft?: Maybe<Scalars['Int']>;
  /** The element’s right position within its structure. */
  rgt?: Maybe<Scalars['Int']>;
  /** The element’s level within its structure */
  level?: Maybe<Scalars['Int']>;
  /** The element’s structure’s root ID */
  root?: Maybe<Scalars['Int']>;
  /** The element’s structure ID. */
  structureId?: Maybe<Scalars['Int']>;
  /** Returns whether this is a draft. */
  isDraft?: Maybe<Scalars['Boolean']>;
  /** Returns whether this is a revision. */
  isRevision?: Maybe<Scalars['Boolean']>;
  /** The ID of the draft to return (from the `drafts` table) */
  draftId?: Maybe<Scalars['Int']>;
  /** Returns whether this is an unpublished draft. */
  isUnpublishedDraft?: Maybe<Scalars['Boolean']>;
  /** Returns whether this is an unpublished draft. **This field is deprecated.** `isUnpublishedDraft` should be used instead. */
  isUnsavedDraft?: Maybe<Scalars['Boolean']>;
  /** The name of the draft. */
  draftName?: Maybe<Scalars['String']>;
  /** The notes for the draft. */
  draftNotes?: Maybe<Scalars['String']>;
  /** Returns the entry’s canonical ID. */
  canonicalId?: Maybe<Scalars['Int']>;
  /** Returns the entry’s canonical UUID. */
  canonicalUid?: Maybe<Scalars['String']>;
  /**
   * Returns the entry’s canonical ID.
   * @deprecated this field has been deprecated since Craft 3.7.7. Use `canonicalId` instead.
   */
  sourceId?: Maybe<Scalars['Int']>;
  /**
   * Returns the entry’s canonical UUID.
   * @deprecated this field has been deprecated since Craft 3.7.7. Use `canonicalUid` instead.
   */
  sourceUid?: Maybe<Scalars['String']>;
  /** The ID of the section that contains the entry. */
  sectionId?: Maybe<Scalars['Int']>;
  /** The handle of the section that contains the entry. */
  sectionHandle?: Maybe<Scalars['String']>;
  /** The ID of the entry type that contains the entry. */
  typeId?: Maybe<Scalars['Int']>;
  /** The handle of the entry type that contains the entry. */
  typeHandle?: Maybe<Scalars['String']>;
  /** The entry's post date. */
  postDate?: Maybe<Scalars['DateTime']>;
  /** The expiry date of the entry. */
  expiryDate?: Maybe<Scalars['DateTime']>;
  /** The entry’s children, if the section is a structure. Accepts the same arguments as the `entries` query. */
  children?: Maybe<Array<Maybe<EntryInterface>>>;
  /** The entry’s descendants, if the section is a structure. Accepts the same arguments as the `entries` query. */
  descendants?: Maybe<Array<Maybe<EntryInterface>>>;
  /** The entry’s parent, if the section is a structure. */
  parent?: Maybe<EntryInterface>;
  /** The entry’s ancestors, if the section is a structure. Accepts the same arguments as the `entries` query. */
  ancestors?: Maybe<Array<Maybe<EntryInterface>>>;
  /** The element’s full URL */
  url?: Maybe<Scalars['String']>;
  /** The same element in other locales. */
  localized?: Maybe<Array<Maybe<EntryInterface>>>;
  /** Returns the previous element relative to this one, from a given set of criteria. */
  prev?: Maybe<EntryInterface>;
  /** Returns the next element relative to this one, from a given set of criteria. */
  next?: Maybe<EntryInterface>;
  seo?: Maybe<Array<Maybe<Seo_MatrixField>>>;
  image?: Maybe<Array<Maybe<AssetInterface>>>;
  textAdditional?: Maybe<Scalars['String']>;
  text?: Maybe<Scalars['String']>;
  textWithLineBreaks?: Maybe<Scalars['String']>;
};


export type People_Person_Entry_CountArgs = {
  field: Scalars['String'];
};


export type People_Person_EntryChildrenArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type People_Person_EntryDescendantsArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type People_Person_EntryParentArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type People_Person_EntryAncestorsArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type People_Person_EntryLocalizedArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type People_Person_EntryPrevArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type People_Person_EntryNextArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type People_Person_EntrySeoArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  fieldId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ownerId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type People_Person_EntryImageArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  volumeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  volume?: Maybe<Array<Maybe<Scalars['String']>>>;
  folderId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  filename?: Maybe<Array<Maybe<Scalars['String']>>>;
  kind?: Maybe<Array<Maybe<Scalars['String']>>>;
  height?: Maybe<Array<Maybe<Scalars['String']>>>;
  width?: Maybe<Array<Maybe<Scalars['String']>>>;
  size?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateModified?: Maybe<Scalars['String']>;
  includeSubfolders?: Maybe<Scalars['Boolean']>;
  withTransforms?: Maybe<Array<Maybe<Scalars['String']>>>;
  uploader?: Maybe<Scalars['QueryArgument']>;
};

export type Pills_MatrixField = Pills_Pill_BlockType;

export type Pills_Pill_BlockType = ElementInterface & MatrixBlockInterface & {
  /** The id of the entity */
  id?: Maybe<Scalars['ID']>;
  /** The uid of the entity */
  uid?: Maybe<Scalars['String']>;
  /** Return a number of related elements for a field. */
  _count?: Maybe<Scalars['Int']>;
  /** The element’s title. */
  title?: Maybe<Scalars['String']>;
  /** The element’s slug. */
  slug?: Maybe<Scalars['String']>;
  /** The element’s URI. */
  uri?: Maybe<Scalars['String']>;
  /** Whether the element is enabled or not. */
  enabled?: Maybe<Scalars['Boolean']>;
  /** Whether the element is archived or not. */
  archived?: Maybe<Scalars['Boolean']>;
  /** The ID of the site the element is associated with. */
  siteId?: Maybe<Scalars['Int']>;
  /** The unique identifier for an element-site relation. */
  siteSettingsId?: Maybe<Scalars['ID']>;
  /** The language of the site element is associated with. */
  language?: Maybe<Scalars['String']>;
  /** The element’s search score, if the `search` parameter was used when querying for the element. */
  searchScore?: Maybe<Scalars['String']>;
  /** Whether the element has been soft-deleted or not. */
  trashed?: Maybe<Scalars['Boolean']>;
  /** The element's status. */
  status?: Maybe<Scalars['String']>;
  /** The date the element was created. */
  dateCreated?: Maybe<Scalars['DateTime']>;
  /** The date the element was last updated. */
  dateUpdated?: Maybe<Scalars['DateTime']>;
  /** The ID of the field that owns the matrix block. */
  fieldId?: Maybe<Scalars['Int']>;
  /** The ID of the element that owns the matrix block. */
  ownerId?: Maybe<Scalars['Int']>;
  /** The ID of the matrix block's type. */
  typeId?: Maybe<Scalars['Int']>;
  /** The handle of the matrix block's type. */
  typeHandle?: Maybe<Scalars['String']>;
  /** The sort order of the matrix block within the owner element field. */
  sortOrder?: Maybe<Scalars['Int']>;
  titlePill?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  bg?: Maybe<Scalars['String']>;
};


export type Pills_Pill_BlockType_CountArgs = {
  field: Scalars['String'];
};

export type PostNewsBlocks_NeoField = PostNewsBlocks_Image_BlockType | PostNewsBlocks_RichText_BlockType;

export type PostNewsBlocks_Image_BlockType = NeoBlockInterface & ElementInterface & {
  /** The id of the entity */
  id?: Maybe<Scalars['ID']>;
  /** The uid of the entity */
  uid?: Maybe<Scalars['String']>;
  /** Return a number of related elements for a field. */
  _count?: Maybe<Scalars['Int']>;
  /** The element’s title. */
  title?: Maybe<Scalars['String']>;
  /** The element’s slug. */
  slug?: Maybe<Scalars['String']>;
  /** The element’s URI. */
  uri?: Maybe<Scalars['String']>;
  /** Whether the element is enabled or not. */
  enabled?: Maybe<Scalars['Boolean']>;
  /** Whether the element is archived or not. */
  archived?: Maybe<Scalars['Boolean']>;
  /** The ID of the site the element is associated with. */
  siteId?: Maybe<Scalars['Int']>;
  /** The unique identifier for an element-site relation. */
  siteSettingsId?: Maybe<Scalars['ID']>;
  /** The language of the site element is associated with. */
  language?: Maybe<Scalars['String']>;
  /** The element’s search score, if the `search` parameter was used when querying for the element. */
  searchScore?: Maybe<Scalars['String']>;
  /** Whether the element has been soft-deleted or not. */
  trashed?: Maybe<Scalars['Boolean']>;
  /** The element's status. */
  status?: Maybe<Scalars['String']>;
  /** The date the element was created. */
  dateCreated?: Maybe<Scalars['DateTime']>;
  /** The date the element was last updated. */
  dateUpdated?: Maybe<Scalars['DateTime']>;
  /** The ID of the field that owns the neo block. */
  fieldId?: Maybe<Scalars['Int']>;
  /** The Neo block's level. */
  level?: Maybe<Scalars['Int']>;
  /** The ID of the element that owns the neo block. */
  ownerId?: Maybe<Scalars['Int']>;
  /** The ID of the neo block's type. */
  typeId?: Maybe<Scalars['Int']>;
  /** The handle of the neo block's type. */
  typeHandle?: Maybe<Scalars['String']>;
  image?: Maybe<Array<Maybe<AssetInterface>>>;
};


export type PostNewsBlocks_Image_BlockType_CountArgs = {
  field: Scalars['String'];
};


export type PostNewsBlocks_Image_BlockTypeImageArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  volumeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  volume?: Maybe<Array<Maybe<Scalars['String']>>>;
  folderId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  filename?: Maybe<Array<Maybe<Scalars['String']>>>;
  kind?: Maybe<Array<Maybe<Scalars['String']>>>;
  height?: Maybe<Array<Maybe<Scalars['String']>>>;
  width?: Maybe<Array<Maybe<Scalars['String']>>>;
  size?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateModified?: Maybe<Scalars['String']>;
  includeSubfolders?: Maybe<Scalars['Boolean']>;
  withTransforms?: Maybe<Array<Maybe<Scalars['String']>>>;
  uploader?: Maybe<Scalars['QueryArgument']>;
};

export type PostNewsBlocks_RichText_BlockType = NeoBlockInterface & ElementInterface & {
  /** The id of the entity */
  id?: Maybe<Scalars['ID']>;
  /** The uid of the entity */
  uid?: Maybe<Scalars['String']>;
  /** Return a number of related elements for a field. */
  _count?: Maybe<Scalars['Int']>;
  /** The element’s title. */
  title?: Maybe<Scalars['String']>;
  /** The element’s slug. */
  slug?: Maybe<Scalars['String']>;
  /** The element’s URI. */
  uri?: Maybe<Scalars['String']>;
  /** Whether the element is enabled or not. */
  enabled?: Maybe<Scalars['Boolean']>;
  /** Whether the element is archived or not. */
  archived?: Maybe<Scalars['Boolean']>;
  /** The ID of the site the element is associated with. */
  siteId?: Maybe<Scalars['Int']>;
  /** The unique identifier for an element-site relation. */
  siteSettingsId?: Maybe<Scalars['ID']>;
  /** The language of the site element is associated with. */
  language?: Maybe<Scalars['String']>;
  /** The element’s search score, if the `search` parameter was used when querying for the element. */
  searchScore?: Maybe<Scalars['String']>;
  /** Whether the element has been soft-deleted or not. */
  trashed?: Maybe<Scalars['Boolean']>;
  /** The element's status. */
  status?: Maybe<Scalars['String']>;
  /** The date the element was created. */
  dateCreated?: Maybe<Scalars['DateTime']>;
  /** The date the element was last updated. */
  dateUpdated?: Maybe<Scalars['DateTime']>;
  /** The ID of the field that owns the neo block. */
  fieldId?: Maybe<Scalars['Int']>;
  /** The Neo block's level. */
  level?: Maybe<Scalars['Int']>;
  /** The ID of the element that owns the neo block. */
  ownerId?: Maybe<Scalars['Int']>;
  /** The ID of the neo block's type. */
  typeId?: Maybe<Scalars['Int']>;
  /** The handle of the neo block's type. */
  typeHandle?: Maybe<Scalars['String']>;
  richText?: Maybe<Scalars['String']>;
};


export type PostNewsBlocks_RichText_BlockType_CountArgs = {
  field: Scalars['String'];
};

export type PostStoryBlocks_NeoField = PostStoryBlocks_RichText_BlockType | PostStoryBlocks_Quote_BlockType;

export type PostStoryBlocks_Quote_BlockType = NeoBlockInterface & ElementInterface & {
  /** The id of the entity */
  id?: Maybe<Scalars['ID']>;
  /** The uid of the entity */
  uid?: Maybe<Scalars['String']>;
  /** Return a number of related elements for a field. */
  _count?: Maybe<Scalars['Int']>;
  /** The element’s title. */
  title?: Maybe<Scalars['String']>;
  /** The element’s slug. */
  slug?: Maybe<Scalars['String']>;
  /** The element’s URI. */
  uri?: Maybe<Scalars['String']>;
  /** Whether the element is enabled or not. */
  enabled?: Maybe<Scalars['Boolean']>;
  /** Whether the element is archived or not. */
  archived?: Maybe<Scalars['Boolean']>;
  /** The ID of the site the element is associated with. */
  siteId?: Maybe<Scalars['Int']>;
  /** The unique identifier for an element-site relation. */
  siteSettingsId?: Maybe<Scalars['ID']>;
  /** The language of the site element is associated with. */
  language?: Maybe<Scalars['String']>;
  /** The element’s search score, if the `search` parameter was used when querying for the element. */
  searchScore?: Maybe<Scalars['String']>;
  /** Whether the element has been soft-deleted or not. */
  trashed?: Maybe<Scalars['Boolean']>;
  /** The element's status. */
  status?: Maybe<Scalars['String']>;
  /** The date the element was created. */
  dateCreated?: Maybe<Scalars['DateTime']>;
  /** The date the element was last updated. */
  dateUpdated?: Maybe<Scalars['DateTime']>;
  /** The ID of the field that owns the neo block. */
  fieldId?: Maybe<Scalars['Int']>;
  /** The Neo block's level. */
  level?: Maybe<Scalars['Int']>;
  /** The ID of the element that owns the neo block. */
  ownerId?: Maybe<Scalars['Int']>;
  /** The ID of the neo block's type. */
  typeId?: Maybe<Scalars['Int']>;
  /** The handle of the neo block's type. */
  typeHandle?: Maybe<Scalars['String']>;
  quote?: Maybe<Array<Maybe<Quote_MatrixField>>>;
};


export type PostStoryBlocks_Quote_BlockType_CountArgs = {
  field: Scalars['String'];
};


export type PostStoryBlocks_Quote_BlockTypeQuoteArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  fieldId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ownerId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type PostStoryBlocks_RichText_BlockType = NeoBlockInterface & ElementInterface & {
  /** The id of the entity */
  id?: Maybe<Scalars['ID']>;
  /** The uid of the entity */
  uid?: Maybe<Scalars['String']>;
  /** Return a number of related elements for a field. */
  _count?: Maybe<Scalars['Int']>;
  /** The element’s title. */
  title?: Maybe<Scalars['String']>;
  /** The element’s slug. */
  slug?: Maybe<Scalars['String']>;
  /** The element’s URI. */
  uri?: Maybe<Scalars['String']>;
  /** Whether the element is enabled or not. */
  enabled?: Maybe<Scalars['Boolean']>;
  /** Whether the element is archived or not. */
  archived?: Maybe<Scalars['Boolean']>;
  /** The ID of the site the element is associated with. */
  siteId?: Maybe<Scalars['Int']>;
  /** The unique identifier for an element-site relation. */
  siteSettingsId?: Maybe<Scalars['ID']>;
  /** The language of the site element is associated with. */
  language?: Maybe<Scalars['String']>;
  /** The element’s search score, if the `search` parameter was used when querying for the element. */
  searchScore?: Maybe<Scalars['String']>;
  /** Whether the element has been soft-deleted or not. */
  trashed?: Maybe<Scalars['Boolean']>;
  /** The element's status. */
  status?: Maybe<Scalars['String']>;
  /** The date the element was created. */
  dateCreated?: Maybe<Scalars['DateTime']>;
  /** The date the element was last updated. */
  dateUpdated?: Maybe<Scalars['DateTime']>;
  /** The ID of the field that owns the neo block. */
  fieldId?: Maybe<Scalars['Int']>;
  /** The Neo block's level. */
  level?: Maybe<Scalars['Int']>;
  /** The ID of the element that owns the neo block. */
  ownerId?: Maybe<Scalars['Int']>;
  /** The ID of the neo block's type. */
  typeId?: Maybe<Scalars['Int']>;
  /** The handle of the neo block's type. */
  typeHandle?: Maybe<Scalars['String']>;
  richText?: Maybe<Scalars['String']>;
};


export type PostStoryBlocks_RichText_BlockType_CountArgs = {
  field: Scalars['String'];
};

export type Posts_News_Entry = ElementInterface & EntryInterface & {
  /** The id of the entity */
  id?: Maybe<Scalars['ID']>;
  /** The uid of the entity */
  uid?: Maybe<Scalars['String']>;
  /** Return a number of related elements for a field. */
  _count?: Maybe<Scalars['Int']>;
  /** The element’s title. */
  title?: Maybe<Scalars['String']>;
  /** The element’s slug. */
  slug?: Maybe<Scalars['String']>;
  /** The element’s URI. */
  uri?: Maybe<Scalars['String']>;
  /** Whether the element is enabled or not. */
  enabled?: Maybe<Scalars['Boolean']>;
  /** Whether the element is archived or not. */
  archived?: Maybe<Scalars['Boolean']>;
  /** The ID of the site the element is associated with. */
  siteId?: Maybe<Scalars['Int']>;
  /** The unique identifier for an element-site relation. */
  siteSettingsId?: Maybe<Scalars['ID']>;
  /** The language of the site element is associated with. */
  language?: Maybe<Scalars['String']>;
  /** The element’s search score, if the `search` parameter was used when querying for the element. */
  searchScore?: Maybe<Scalars['String']>;
  /** Whether the element has been soft-deleted or not. */
  trashed?: Maybe<Scalars['Boolean']>;
  /** The element's status. */
  status?: Maybe<Scalars['String']>;
  /** The date the element was created. */
  dateCreated?: Maybe<Scalars['DateTime']>;
  /** The date the element was last updated. */
  dateUpdated?: Maybe<Scalars['DateTime']>;
  /** The element’s left position within its structure. */
  lft?: Maybe<Scalars['Int']>;
  /** The element’s right position within its structure. */
  rgt?: Maybe<Scalars['Int']>;
  /** The element’s level within its structure */
  level?: Maybe<Scalars['Int']>;
  /** The element’s structure’s root ID */
  root?: Maybe<Scalars['Int']>;
  /** The element’s structure ID. */
  structureId?: Maybe<Scalars['Int']>;
  /** Returns whether this is a draft. */
  isDraft?: Maybe<Scalars['Boolean']>;
  /** Returns whether this is a revision. */
  isRevision?: Maybe<Scalars['Boolean']>;
  /** The ID of the draft to return (from the `drafts` table) */
  draftId?: Maybe<Scalars['Int']>;
  /** Returns whether this is an unpublished draft. */
  isUnpublishedDraft?: Maybe<Scalars['Boolean']>;
  /** Returns whether this is an unpublished draft. **This field is deprecated.** `isUnpublishedDraft` should be used instead. */
  isUnsavedDraft?: Maybe<Scalars['Boolean']>;
  /** The name of the draft. */
  draftName?: Maybe<Scalars['String']>;
  /** The notes for the draft. */
  draftNotes?: Maybe<Scalars['String']>;
  /** Returns the entry’s canonical ID. */
  canonicalId?: Maybe<Scalars['Int']>;
  /** Returns the entry’s canonical UUID. */
  canonicalUid?: Maybe<Scalars['String']>;
  /**
   * Returns the entry’s canonical ID.
   * @deprecated this field has been deprecated since Craft 3.7.7. Use `canonicalId` instead.
   */
  sourceId?: Maybe<Scalars['Int']>;
  /**
   * Returns the entry’s canonical UUID.
   * @deprecated this field has been deprecated since Craft 3.7.7. Use `canonicalUid` instead.
   */
  sourceUid?: Maybe<Scalars['String']>;
  /** The ID of the section that contains the entry. */
  sectionId?: Maybe<Scalars['Int']>;
  /** The handle of the section that contains the entry. */
  sectionHandle?: Maybe<Scalars['String']>;
  /** The ID of the entry type that contains the entry. */
  typeId?: Maybe<Scalars['Int']>;
  /** The handle of the entry type that contains the entry. */
  typeHandle?: Maybe<Scalars['String']>;
  /** The entry's post date. */
  postDate?: Maybe<Scalars['DateTime']>;
  /** The expiry date of the entry. */
  expiryDate?: Maybe<Scalars['DateTime']>;
  /** The entry’s children, if the section is a structure. Accepts the same arguments as the `entries` query. */
  children?: Maybe<Array<Maybe<EntryInterface>>>;
  /** The entry’s descendants, if the section is a structure. Accepts the same arguments as the `entries` query. */
  descendants?: Maybe<Array<Maybe<EntryInterface>>>;
  /** The entry’s parent, if the section is a structure. */
  parent?: Maybe<EntryInterface>;
  /** The entry’s ancestors, if the section is a structure. Accepts the same arguments as the `entries` query. */
  ancestors?: Maybe<Array<Maybe<EntryInterface>>>;
  /** The element’s full URL */
  url?: Maybe<Scalars['String']>;
  /** The same element in other locales. */
  localized?: Maybe<Array<Maybe<EntryInterface>>>;
  /** Returns the previous element relative to this one, from a given set of criteria. */
  prev?: Maybe<EntryInterface>;
  /** Returns the next element relative to this one, from a given set of criteria. */
  next?: Maybe<EntryInterface>;
  seo?: Maybe<Array<Maybe<Seo_MatrixField>>>;
  image?: Maybe<Array<Maybe<AssetInterface>>>;
  thumbnail?: Maybe<Array<Maybe<AssetInterface>>>;
  color?: Maybe<Scalars['String']>;
  postNewsBlocks?: Maybe<Array<Maybe<PostNewsBlocks_NeoField>>>;
};


export type Posts_News_Entry_CountArgs = {
  field: Scalars['String'];
};


export type Posts_News_EntryChildrenArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Posts_News_EntryDescendantsArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Posts_News_EntryParentArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Posts_News_EntryAncestorsArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Posts_News_EntryLocalizedArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Posts_News_EntryPrevArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Posts_News_EntryNextArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Posts_News_EntrySeoArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  fieldId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ownerId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Posts_News_EntryImageArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  volumeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  volume?: Maybe<Array<Maybe<Scalars['String']>>>;
  folderId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  filename?: Maybe<Array<Maybe<Scalars['String']>>>;
  kind?: Maybe<Array<Maybe<Scalars['String']>>>;
  height?: Maybe<Array<Maybe<Scalars['String']>>>;
  width?: Maybe<Array<Maybe<Scalars['String']>>>;
  size?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateModified?: Maybe<Scalars['String']>;
  includeSubfolders?: Maybe<Scalars['Boolean']>;
  withTransforms?: Maybe<Array<Maybe<Scalars['String']>>>;
  uploader?: Maybe<Scalars['QueryArgument']>;
};


export type Posts_News_EntryThumbnailArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  volumeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  volume?: Maybe<Array<Maybe<Scalars['String']>>>;
  folderId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  filename?: Maybe<Array<Maybe<Scalars['String']>>>;
  kind?: Maybe<Array<Maybe<Scalars['String']>>>;
  height?: Maybe<Array<Maybe<Scalars['String']>>>;
  width?: Maybe<Array<Maybe<Scalars['String']>>>;
  size?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateModified?: Maybe<Scalars['String']>;
  includeSubfolders?: Maybe<Scalars['Boolean']>;
  withTransforms?: Maybe<Array<Maybe<Scalars['String']>>>;
  uploader?: Maybe<Scalars['QueryArgument']>;
};


export type Posts_News_EntryPostNewsBlocksArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  fieldId?: Maybe<Array<Maybe<Scalars['Int']>>>;
  ownerId?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['Int']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  level?: Maybe<Scalars['Int']>;
};

export type Posts_Story_Entry = ElementInterface & EntryInterface & {
  /** The id of the entity */
  id?: Maybe<Scalars['ID']>;
  /** The uid of the entity */
  uid?: Maybe<Scalars['String']>;
  /** Return a number of related elements for a field. */
  _count?: Maybe<Scalars['Int']>;
  /** The element’s title. */
  title?: Maybe<Scalars['String']>;
  /** The element’s slug. */
  slug?: Maybe<Scalars['String']>;
  /** The element’s URI. */
  uri?: Maybe<Scalars['String']>;
  /** Whether the element is enabled or not. */
  enabled?: Maybe<Scalars['Boolean']>;
  /** Whether the element is archived or not. */
  archived?: Maybe<Scalars['Boolean']>;
  /** The ID of the site the element is associated with. */
  siteId?: Maybe<Scalars['Int']>;
  /** The unique identifier for an element-site relation. */
  siteSettingsId?: Maybe<Scalars['ID']>;
  /** The language of the site element is associated with. */
  language?: Maybe<Scalars['String']>;
  /** The element’s search score, if the `search` parameter was used when querying for the element. */
  searchScore?: Maybe<Scalars['String']>;
  /** Whether the element has been soft-deleted or not. */
  trashed?: Maybe<Scalars['Boolean']>;
  /** The element's status. */
  status?: Maybe<Scalars['String']>;
  /** The date the element was created. */
  dateCreated?: Maybe<Scalars['DateTime']>;
  /** The date the element was last updated. */
  dateUpdated?: Maybe<Scalars['DateTime']>;
  /** The element’s left position within its structure. */
  lft?: Maybe<Scalars['Int']>;
  /** The element’s right position within its structure. */
  rgt?: Maybe<Scalars['Int']>;
  /** The element’s level within its structure */
  level?: Maybe<Scalars['Int']>;
  /** The element’s structure’s root ID */
  root?: Maybe<Scalars['Int']>;
  /** The element’s structure ID. */
  structureId?: Maybe<Scalars['Int']>;
  /** Returns whether this is a draft. */
  isDraft?: Maybe<Scalars['Boolean']>;
  /** Returns whether this is a revision. */
  isRevision?: Maybe<Scalars['Boolean']>;
  /** The ID of the draft to return (from the `drafts` table) */
  draftId?: Maybe<Scalars['Int']>;
  /** Returns whether this is an unpublished draft. */
  isUnpublishedDraft?: Maybe<Scalars['Boolean']>;
  /** Returns whether this is an unpublished draft. **This field is deprecated.** `isUnpublishedDraft` should be used instead. */
  isUnsavedDraft?: Maybe<Scalars['Boolean']>;
  /** The name of the draft. */
  draftName?: Maybe<Scalars['String']>;
  /** The notes for the draft. */
  draftNotes?: Maybe<Scalars['String']>;
  /** Returns the entry’s canonical ID. */
  canonicalId?: Maybe<Scalars['Int']>;
  /** Returns the entry’s canonical UUID. */
  canonicalUid?: Maybe<Scalars['String']>;
  /**
   * Returns the entry’s canonical ID.
   * @deprecated this field has been deprecated since Craft 3.7.7. Use `canonicalId` instead.
   */
  sourceId?: Maybe<Scalars['Int']>;
  /**
   * Returns the entry’s canonical UUID.
   * @deprecated this field has been deprecated since Craft 3.7.7. Use `canonicalUid` instead.
   */
  sourceUid?: Maybe<Scalars['String']>;
  /** The ID of the section that contains the entry. */
  sectionId?: Maybe<Scalars['Int']>;
  /** The handle of the section that contains the entry. */
  sectionHandle?: Maybe<Scalars['String']>;
  /** The ID of the entry type that contains the entry. */
  typeId?: Maybe<Scalars['Int']>;
  /** The handle of the entry type that contains the entry. */
  typeHandle?: Maybe<Scalars['String']>;
  /** The entry's post date. */
  postDate?: Maybe<Scalars['DateTime']>;
  /** The expiry date of the entry. */
  expiryDate?: Maybe<Scalars['DateTime']>;
  /** The entry’s children, if the section is a structure. Accepts the same arguments as the `entries` query. */
  children?: Maybe<Array<Maybe<EntryInterface>>>;
  /** The entry’s descendants, if the section is a structure. Accepts the same arguments as the `entries` query. */
  descendants?: Maybe<Array<Maybe<EntryInterface>>>;
  /** The entry’s parent, if the section is a structure. */
  parent?: Maybe<EntryInterface>;
  /** The entry’s ancestors, if the section is a structure. Accepts the same arguments as the `entries` query. */
  ancestors?: Maybe<Array<Maybe<EntryInterface>>>;
  /** The element’s full URL */
  url?: Maybe<Scalars['String']>;
  /** The same element in other locales. */
  localized?: Maybe<Array<Maybe<EntryInterface>>>;
  /** Returns the previous element relative to this one, from a given set of criteria. */
  prev?: Maybe<EntryInterface>;
  /** Returns the next element relative to this one, from a given set of criteria. */
  next?: Maybe<EntryInterface>;
  seo?: Maybe<Array<Maybe<Seo_MatrixField>>>;
  image?: Maybe<Array<Maybe<AssetInterface>>>;
  thumbnail?: Maybe<Array<Maybe<AssetInterface>>>;
  postStoryBlocks?: Maybe<Array<Maybe<PostStoryBlocks_NeoField>>>;
};


export type Posts_Story_Entry_CountArgs = {
  field: Scalars['String'];
};


export type Posts_Story_EntryChildrenArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Posts_Story_EntryDescendantsArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Posts_Story_EntryParentArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Posts_Story_EntryAncestorsArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Posts_Story_EntryLocalizedArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Posts_Story_EntryPrevArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Posts_Story_EntryNextArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Posts_Story_EntrySeoArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  fieldId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ownerId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Posts_Story_EntryImageArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  volumeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  volume?: Maybe<Array<Maybe<Scalars['String']>>>;
  folderId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  filename?: Maybe<Array<Maybe<Scalars['String']>>>;
  kind?: Maybe<Array<Maybe<Scalars['String']>>>;
  height?: Maybe<Array<Maybe<Scalars['String']>>>;
  width?: Maybe<Array<Maybe<Scalars['String']>>>;
  size?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateModified?: Maybe<Scalars['String']>;
  includeSubfolders?: Maybe<Scalars['Boolean']>;
  withTransforms?: Maybe<Array<Maybe<Scalars['String']>>>;
  uploader?: Maybe<Scalars['QueryArgument']>;
};


export type Posts_Story_EntryThumbnailArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  volumeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  volume?: Maybe<Array<Maybe<Scalars['String']>>>;
  folderId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  filename?: Maybe<Array<Maybe<Scalars['String']>>>;
  kind?: Maybe<Array<Maybe<Scalars['String']>>>;
  height?: Maybe<Array<Maybe<Scalars['String']>>>;
  width?: Maybe<Array<Maybe<Scalars['String']>>>;
  size?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateModified?: Maybe<Scalars['String']>;
  includeSubfolders?: Maybe<Scalars['Boolean']>;
  withTransforms?: Maybe<Array<Maybe<Scalars['String']>>>;
  uploader?: Maybe<Scalars['QueryArgument']>;
};


export type Posts_Story_EntryPostStoryBlocksArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  fieldId?: Maybe<Array<Maybe<Scalars['Int']>>>;
  ownerId?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['Int']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  level?: Maybe<Scalars['Int']>;
};

export type Programs_Program_Entry = ElementInterface & EntryInterface & {
  /** The id of the entity */
  id?: Maybe<Scalars['ID']>;
  /** The uid of the entity */
  uid?: Maybe<Scalars['String']>;
  /** Return a number of related elements for a field. */
  _count?: Maybe<Scalars['Int']>;
  /** The element’s title. */
  title?: Maybe<Scalars['String']>;
  /** The element’s slug. */
  slug?: Maybe<Scalars['String']>;
  /** The element’s URI. */
  uri?: Maybe<Scalars['String']>;
  /** Whether the element is enabled or not. */
  enabled?: Maybe<Scalars['Boolean']>;
  /** Whether the element is archived or not. */
  archived?: Maybe<Scalars['Boolean']>;
  /** The ID of the site the element is associated with. */
  siteId?: Maybe<Scalars['Int']>;
  /** The unique identifier for an element-site relation. */
  siteSettingsId?: Maybe<Scalars['ID']>;
  /** The language of the site element is associated with. */
  language?: Maybe<Scalars['String']>;
  /** The element’s search score, if the `search` parameter was used when querying for the element. */
  searchScore?: Maybe<Scalars['String']>;
  /** Whether the element has been soft-deleted or not. */
  trashed?: Maybe<Scalars['Boolean']>;
  /** The element's status. */
  status?: Maybe<Scalars['String']>;
  /** The date the element was created. */
  dateCreated?: Maybe<Scalars['DateTime']>;
  /** The date the element was last updated. */
  dateUpdated?: Maybe<Scalars['DateTime']>;
  /** The element’s left position within its structure. */
  lft?: Maybe<Scalars['Int']>;
  /** The element’s right position within its structure. */
  rgt?: Maybe<Scalars['Int']>;
  /** The element’s level within its structure */
  level?: Maybe<Scalars['Int']>;
  /** The element’s structure’s root ID */
  root?: Maybe<Scalars['Int']>;
  /** The element’s structure ID. */
  structureId?: Maybe<Scalars['Int']>;
  /** Returns whether this is a draft. */
  isDraft?: Maybe<Scalars['Boolean']>;
  /** Returns whether this is a revision. */
  isRevision?: Maybe<Scalars['Boolean']>;
  /** The ID of the draft to return (from the `drafts` table) */
  draftId?: Maybe<Scalars['Int']>;
  /** Returns whether this is an unpublished draft. */
  isUnpublishedDraft?: Maybe<Scalars['Boolean']>;
  /** Returns whether this is an unpublished draft. **This field is deprecated.** `isUnpublishedDraft` should be used instead. */
  isUnsavedDraft?: Maybe<Scalars['Boolean']>;
  /** The name of the draft. */
  draftName?: Maybe<Scalars['String']>;
  /** The notes for the draft. */
  draftNotes?: Maybe<Scalars['String']>;
  /** Returns the entry’s canonical ID. */
  canonicalId?: Maybe<Scalars['Int']>;
  /** Returns the entry’s canonical UUID. */
  canonicalUid?: Maybe<Scalars['String']>;
  /**
   * Returns the entry’s canonical ID.
   * @deprecated this field has been deprecated since Craft 3.7.7. Use `canonicalId` instead.
   */
  sourceId?: Maybe<Scalars['Int']>;
  /**
   * Returns the entry’s canonical UUID.
   * @deprecated this field has been deprecated since Craft 3.7.7. Use `canonicalUid` instead.
   */
  sourceUid?: Maybe<Scalars['String']>;
  /** The ID of the section that contains the entry. */
  sectionId?: Maybe<Scalars['Int']>;
  /** The handle of the section that contains the entry. */
  sectionHandle?: Maybe<Scalars['String']>;
  /** The ID of the entry type that contains the entry. */
  typeId?: Maybe<Scalars['Int']>;
  /** The handle of the entry type that contains the entry. */
  typeHandle?: Maybe<Scalars['String']>;
  /** The entry's post date. */
  postDate?: Maybe<Scalars['DateTime']>;
  /** The expiry date of the entry. */
  expiryDate?: Maybe<Scalars['DateTime']>;
  /** The entry’s children, if the section is a structure. Accepts the same arguments as the `entries` query. */
  children?: Maybe<Array<Maybe<EntryInterface>>>;
  /** The entry’s descendants, if the section is a structure. Accepts the same arguments as the `entries` query. */
  descendants?: Maybe<Array<Maybe<EntryInterface>>>;
  /** The entry’s parent, if the section is a structure. */
  parent?: Maybe<EntryInterface>;
  /** The entry’s ancestors, if the section is a structure. Accepts the same arguments as the `entries` query. */
  ancestors?: Maybe<Array<Maybe<EntryInterface>>>;
  /** The element’s full URL */
  url?: Maybe<Scalars['String']>;
  /** The same element in other locales. */
  localized?: Maybe<Array<Maybe<EntryInterface>>>;
  /** Returns the previous element relative to this one, from a given set of criteria. */
  prev?: Maybe<EntryInterface>;
  /** Returns the next element relative to this one, from a given set of criteria. */
  next?: Maybe<EntryInterface>;
  image?: Maybe<Array<Maybe<AssetInterface>>>;
  text?: Maybe<Scalars['String']>;
  textWithLineBreaks?: Maybe<Scalars['String']>;
  contactLink?: Maybe<LinkField_Link>;
};


export type Programs_Program_Entry_CountArgs = {
  field: Scalars['String'];
};


export type Programs_Program_EntryChildrenArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Programs_Program_EntryDescendantsArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Programs_Program_EntryParentArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Programs_Program_EntryAncestorsArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Programs_Program_EntryLocalizedArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Programs_Program_EntryPrevArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Programs_Program_EntryNextArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Programs_Program_EntryImageArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  volumeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  volume?: Maybe<Array<Maybe<Scalars['String']>>>;
  folderId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  filename?: Maybe<Array<Maybe<Scalars['String']>>>;
  kind?: Maybe<Array<Maybe<Scalars['String']>>>;
  height?: Maybe<Array<Maybe<Scalars['String']>>>;
  width?: Maybe<Array<Maybe<Scalars['String']>>>;
  size?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateModified?: Maybe<Scalars['String']>;
  includeSubfolders?: Maybe<Scalars['Boolean']>;
  withTransforms?: Maybe<Array<Maybe<Scalars['String']>>>;
  uploader?: Maybe<Scalars['QueryArgument']>;
};

export type Quote_MatrixField = Quote_Quote_BlockType;

export type Quote_Quote_BlockType = ElementInterface & MatrixBlockInterface & {
  /** The id of the entity */
  id?: Maybe<Scalars['ID']>;
  /** The uid of the entity */
  uid?: Maybe<Scalars['String']>;
  /** Return a number of related elements for a field. */
  _count?: Maybe<Scalars['Int']>;
  /** The element’s title. */
  title?: Maybe<Scalars['String']>;
  /** The element’s slug. */
  slug?: Maybe<Scalars['String']>;
  /** The element’s URI. */
  uri?: Maybe<Scalars['String']>;
  /** Whether the element is enabled or not. */
  enabled?: Maybe<Scalars['Boolean']>;
  /** Whether the element is archived or not. */
  archived?: Maybe<Scalars['Boolean']>;
  /** The ID of the site the element is associated with. */
  siteId?: Maybe<Scalars['Int']>;
  /** The unique identifier for an element-site relation. */
  siteSettingsId?: Maybe<Scalars['ID']>;
  /** The language of the site element is associated with. */
  language?: Maybe<Scalars['String']>;
  /** The element’s search score, if the `search` parameter was used when querying for the element. */
  searchScore?: Maybe<Scalars['String']>;
  /** Whether the element has been soft-deleted or not. */
  trashed?: Maybe<Scalars['Boolean']>;
  /** The element's status. */
  status?: Maybe<Scalars['String']>;
  /** The date the element was created. */
  dateCreated?: Maybe<Scalars['DateTime']>;
  /** The date the element was last updated. */
  dateUpdated?: Maybe<Scalars['DateTime']>;
  /** The ID of the field that owns the matrix block. */
  fieldId?: Maybe<Scalars['Int']>;
  /** The ID of the element that owns the matrix block. */
  ownerId?: Maybe<Scalars['Int']>;
  /** The ID of the matrix block's type. */
  typeId?: Maybe<Scalars['Int']>;
  /** The handle of the matrix block's type. */
  typeHandle?: Maybe<Scalars['String']>;
  /** The sort order of the matrix block within the owner element field. */
  sortOrder?: Maybe<Scalars['Int']>;
  quote?: Maybe<Scalars['String']>;
  caption?: Maybe<Scalars['String']>;
  image?: Maybe<Array<Maybe<AssetInterface>>>;
};


export type Quote_Quote_BlockType_CountArgs = {
  field: Scalars['String'];
};


export type Quote_Quote_BlockTypeImageArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  volumeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  volume?: Maybe<Array<Maybe<Scalars['String']>>>;
  folderId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  filename?: Maybe<Array<Maybe<Scalars['String']>>>;
  kind?: Maybe<Array<Maybe<Scalars['String']>>>;
  height?: Maybe<Array<Maybe<Scalars['String']>>>;
  width?: Maybe<Array<Maybe<Scalars['String']>>>;
  size?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateModified?: Maybe<Scalars['String']>;
  includeSubfolders?: Maybe<Scalars['Boolean']>;
  withTransforms?: Maybe<Array<Maybe<Scalars['String']>>>;
  uploader?: Maybe<Scalars['QueryArgument']>;
};

export type Seo_MatrixField = Seo_Seo_BlockType;

export type Seo_Seo_BlockType = ElementInterface & MatrixBlockInterface & {
  /** The id of the entity */
  id?: Maybe<Scalars['ID']>;
  /** The uid of the entity */
  uid?: Maybe<Scalars['String']>;
  /** Return a number of related elements for a field. */
  _count?: Maybe<Scalars['Int']>;
  /** The element’s title. */
  title?: Maybe<Scalars['String']>;
  /** The element’s slug. */
  slug?: Maybe<Scalars['String']>;
  /** The element’s URI. */
  uri?: Maybe<Scalars['String']>;
  /** Whether the element is enabled or not. */
  enabled?: Maybe<Scalars['Boolean']>;
  /** Whether the element is archived or not. */
  archived?: Maybe<Scalars['Boolean']>;
  /** The ID of the site the element is associated with. */
  siteId?: Maybe<Scalars['Int']>;
  /** The unique identifier for an element-site relation. */
  siteSettingsId?: Maybe<Scalars['ID']>;
  /** The language of the site element is associated with. */
  language?: Maybe<Scalars['String']>;
  /** The element’s search score, if the `search` parameter was used when querying for the element. */
  searchScore?: Maybe<Scalars['String']>;
  /** Whether the element has been soft-deleted or not. */
  trashed?: Maybe<Scalars['Boolean']>;
  /** The element's status. */
  status?: Maybe<Scalars['String']>;
  /** The date the element was created. */
  dateCreated?: Maybe<Scalars['DateTime']>;
  /** The date the element was last updated. */
  dateUpdated?: Maybe<Scalars['DateTime']>;
  /** The ID of the field that owns the matrix block. */
  fieldId?: Maybe<Scalars['Int']>;
  /** The ID of the element that owns the matrix block. */
  ownerId?: Maybe<Scalars['Int']>;
  /** The ID of the matrix block's type. */
  typeId?: Maybe<Scalars['Int']>;
  /** The handle of the matrix block's type. */
  typeHandle?: Maybe<Scalars['String']>;
  /** The sort order of the matrix block within the owner element field. */
  sortOrder?: Maybe<Scalars['Int']>;
  seoTitle?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  image?: Maybe<Array<Maybe<AssetInterface>>>;
};


export type Seo_Seo_BlockType_CountArgs = {
  field: Scalars['String'];
};


export type Seo_Seo_BlockTypeImageArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  volumeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  volume?: Maybe<Array<Maybe<Scalars['String']>>>;
  folderId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  filename?: Maybe<Array<Maybe<Scalars['String']>>>;
  kind?: Maybe<Array<Maybe<Scalars['String']>>>;
  height?: Maybe<Array<Maybe<Scalars['String']>>>;
  width?: Maybe<Array<Maybe<Scalars['String']>>>;
  size?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateModified?: Maybe<Scalars['String']>;
  includeSubfolders?: Maybe<Scalars['Boolean']>;
  withTransforms?: Maybe<Array<Maybe<Scalars['String']>>>;
  uploader?: Maybe<Scalars['QueryArgument']>;
};

export type Services_Service_Entry = ElementInterface & EntryInterface & {
  /** The id of the entity */
  id?: Maybe<Scalars['ID']>;
  /** The uid of the entity */
  uid?: Maybe<Scalars['String']>;
  /** Return a number of related elements for a field. */
  _count?: Maybe<Scalars['Int']>;
  /** The element’s title. */
  title?: Maybe<Scalars['String']>;
  /** The element’s slug. */
  slug?: Maybe<Scalars['String']>;
  /** The element’s URI. */
  uri?: Maybe<Scalars['String']>;
  /** Whether the element is enabled or not. */
  enabled?: Maybe<Scalars['Boolean']>;
  /** Whether the element is archived or not. */
  archived?: Maybe<Scalars['Boolean']>;
  /** The ID of the site the element is associated with. */
  siteId?: Maybe<Scalars['Int']>;
  /** The unique identifier for an element-site relation. */
  siteSettingsId?: Maybe<Scalars['ID']>;
  /** The language of the site element is associated with. */
  language?: Maybe<Scalars['String']>;
  /** The element’s search score, if the `search` parameter was used when querying for the element. */
  searchScore?: Maybe<Scalars['String']>;
  /** Whether the element has been soft-deleted or not. */
  trashed?: Maybe<Scalars['Boolean']>;
  /** The element's status. */
  status?: Maybe<Scalars['String']>;
  /** The date the element was created. */
  dateCreated?: Maybe<Scalars['DateTime']>;
  /** The date the element was last updated. */
  dateUpdated?: Maybe<Scalars['DateTime']>;
  /** The element’s left position within its structure. */
  lft?: Maybe<Scalars['Int']>;
  /** The element’s right position within its structure. */
  rgt?: Maybe<Scalars['Int']>;
  /** The element’s level within its structure */
  level?: Maybe<Scalars['Int']>;
  /** The element’s structure’s root ID */
  root?: Maybe<Scalars['Int']>;
  /** The element’s structure ID. */
  structureId?: Maybe<Scalars['Int']>;
  /** Returns whether this is a draft. */
  isDraft?: Maybe<Scalars['Boolean']>;
  /** Returns whether this is a revision. */
  isRevision?: Maybe<Scalars['Boolean']>;
  /** The ID of the draft to return (from the `drafts` table) */
  draftId?: Maybe<Scalars['Int']>;
  /** Returns whether this is an unpublished draft. */
  isUnpublishedDraft?: Maybe<Scalars['Boolean']>;
  /** Returns whether this is an unpublished draft. **This field is deprecated.** `isUnpublishedDraft` should be used instead. */
  isUnsavedDraft?: Maybe<Scalars['Boolean']>;
  /** The name of the draft. */
  draftName?: Maybe<Scalars['String']>;
  /** The notes for the draft. */
  draftNotes?: Maybe<Scalars['String']>;
  /** Returns the entry’s canonical ID. */
  canonicalId?: Maybe<Scalars['Int']>;
  /** Returns the entry’s canonical UUID. */
  canonicalUid?: Maybe<Scalars['String']>;
  /**
   * Returns the entry’s canonical ID.
   * @deprecated this field has been deprecated since Craft 3.7.7. Use `canonicalId` instead.
   */
  sourceId?: Maybe<Scalars['Int']>;
  /**
   * Returns the entry’s canonical UUID.
   * @deprecated this field has been deprecated since Craft 3.7.7. Use `canonicalUid` instead.
   */
  sourceUid?: Maybe<Scalars['String']>;
  /** The ID of the section that contains the entry. */
  sectionId?: Maybe<Scalars['Int']>;
  /** The handle of the section that contains the entry. */
  sectionHandle?: Maybe<Scalars['String']>;
  /** The ID of the entry type that contains the entry. */
  typeId?: Maybe<Scalars['Int']>;
  /** The handle of the entry type that contains the entry. */
  typeHandle?: Maybe<Scalars['String']>;
  /** The entry's post date. */
  postDate?: Maybe<Scalars['DateTime']>;
  /** The expiry date of the entry. */
  expiryDate?: Maybe<Scalars['DateTime']>;
  /** The entry’s children, if the section is a structure. Accepts the same arguments as the `entries` query. */
  children?: Maybe<Array<Maybe<EntryInterface>>>;
  /** The entry’s descendants, if the section is a structure. Accepts the same arguments as the `entries` query. */
  descendants?: Maybe<Array<Maybe<EntryInterface>>>;
  /** The entry’s parent, if the section is a structure. */
  parent?: Maybe<EntryInterface>;
  /** The entry’s ancestors, if the section is a structure. Accepts the same arguments as the `entries` query. */
  ancestors?: Maybe<Array<Maybe<EntryInterface>>>;
  /** The element’s full URL */
  url?: Maybe<Scalars['String']>;
  /** The same element in other locales. */
  localized?: Maybe<Array<Maybe<EntryInterface>>>;
  /** Returns the previous element relative to this one, from a given set of criteria. */
  prev?: Maybe<EntryInterface>;
  /** Returns the next element relative to this one, from a given set of criteria. */
  next?: Maybe<EntryInterface>;
  seo?: Maybe<Array<Maybe<Seo_MatrixField>>>;
  color?: Maybe<Scalars['String']>;
  image?: Maybe<Array<Maybe<AssetInterface>>>;
  textWithLineBreaks?: Maybe<Scalars['String']>;
  programs?: Maybe<Array<Maybe<EntryInterface>>>;
};


export type Services_Service_Entry_CountArgs = {
  field: Scalars['String'];
};


export type Services_Service_EntryChildrenArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Services_Service_EntryDescendantsArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Services_Service_EntryParentArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Services_Service_EntryAncestorsArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Services_Service_EntryLocalizedArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Services_Service_EntryPrevArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Services_Service_EntryNextArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Services_Service_EntrySeoArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  fieldId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ownerId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Services_Service_EntryImageArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  volumeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  volume?: Maybe<Array<Maybe<Scalars['String']>>>;
  folderId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  filename?: Maybe<Array<Maybe<Scalars['String']>>>;
  kind?: Maybe<Array<Maybe<Scalars['String']>>>;
  height?: Maybe<Array<Maybe<Scalars['String']>>>;
  width?: Maybe<Array<Maybe<Scalars['String']>>>;
  size?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateModified?: Maybe<Scalars['String']>;
  includeSubfolders?: Maybe<Scalars['Boolean']>;
  withTransforms?: Maybe<Array<Maybe<Scalars['String']>>>;
  uploader?: Maybe<Scalars['QueryArgument']>;
};


export type Services_Service_EntryProgramsArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type SliderVertical_MatrixField = SliderVertical_Slide_BlockType;

export type SliderVertical_Slide_BlockType = ElementInterface & MatrixBlockInterface & {
  /** The id of the entity */
  id?: Maybe<Scalars['ID']>;
  /** The uid of the entity */
  uid?: Maybe<Scalars['String']>;
  /** Return a number of related elements for a field. */
  _count?: Maybe<Scalars['Int']>;
  /** The element’s title. */
  title?: Maybe<Scalars['String']>;
  /** The element’s slug. */
  slug?: Maybe<Scalars['String']>;
  /** The element’s URI. */
  uri?: Maybe<Scalars['String']>;
  /** Whether the element is enabled or not. */
  enabled?: Maybe<Scalars['Boolean']>;
  /** Whether the element is archived or not. */
  archived?: Maybe<Scalars['Boolean']>;
  /** The ID of the site the element is associated with. */
  siteId?: Maybe<Scalars['Int']>;
  /** The unique identifier for an element-site relation. */
  siteSettingsId?: Maybe<Scalars['ID']>;
  /** The language of the site element is associated with. */
  language?: Maybe<Scalars['String']>;
  /** The element’s search score, if the `search` parameter was used when querying for the element. */
  searchScore?: Maybe<Scalars['String']>;
  /** Whether the element has been soft-deleted or not. */
  trashed?: Maybe<Scalars['Boolean']>;
  /** The element's status. */
  status?: Maybe<Scalars['String']>;
  /** The date the element was created. */
  dateCreated?: Maybe<Scalars['DateTime']>;
  /** The date the element was last updated. */
  dateUpdated?: Maybe<Scalars['DateTime']>;
  /** The ID of the field that owns the matrix block. */
  fieldId?: Maybe<Scalars['Int']>;
  /** The ID of the element that owns the matrix block. */
  ownerId?: Maybe<Scalars['Int']>;
  /** The ID of the matrix block's type. */
  typeId?: Maybe<Scalars['Int']>;
  /** The handle of the matrix block's type. */
  typeHandle?: Maybe<Scalars['String']>;
  /** The sort order of the matrix block within the owner element field. */
  sortOrder?: Maybe<Scalars['Int']>;
  slideTitle?: Maybe<Scalars['String']>;
  image?: Maybe<Array<Maybe<AssetInterface>>>;
  text?: Maybe<Scalars['String']>;
};


export type SliderVertical_Slide_BlockType_CountArgs = {
  field: Scalars['String'];
};


export type SliderVertical_Slide_BlockTypeImageArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  volumeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  volume?: Maybe<Array<Maybe<Scalars['String']>>>;
  folderId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  filename?: Maybe<Array<Maybe<Scalars['String']>>>;
  kind?: Maybe<Array<Maybe<Scalars['String']>>>;
  height?: Maybe<Array<Maybe<Scalars['String']>>>;
  width?: Maybe<Array<Maybe<Scalars['String']>>>;
  size?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateModified?: Maybe<Scalars['String']>;
  includeSubfolders?: Maybe<Scalars['Boolean']>;
  withTransforms?: Maybe<Array<Maybe<Scalars['String']>>>;
  uploader?: Maybe<Scalars['QueryArgument']>;
};

export type Slides_MatrixField = Slides_Slide_BlockType;

export type Slides_Slide_BlockType = ElementInterface & MatrixBlockInterface & {
  /** The id of the entity */
  id?: Maybe<Scalars['ID']>;
  /** The uid of the entity */
  uid?: Maybe<Scalars['String']>;
  /** Return a number of related elements for a field. */
  _count?: Maybe<Scalars['Int']>;
  /** The element’s title. */
  title?: Maybe<Scalars['String']>;
  /** The element’s slug. */
  slug?: Maybe<Scalars['String']>;
  /** The element’s URI. */
  uri?: Maybe<Scalars['String']>;
  /** Whether the element is enabled or not. */
  enabled?: Maybe<Scalars['Boolean']>;
  /** Whether the element is archived or not. */
  archived?: Maybe<Scalars['Boolean']>;
  /** The ID of the site the element is associated with. */
  siteId?: Maybe<Scalars['Int']>;
  /** The unique identifier for an element-site relation. */
  siteSettingsId?: Maybe<Scalars['ID']>;
  /** The language of the site element is associated with. */
  language?: Maybe<Scalars['String']>;
  /** The element’s search score, if the `search` parameter was used when querying for the element. */
  searchScore?: Maybe<Scalars['String']>;
  /** Whether the element has been soft-deleted or not. */
  trashed?: Maybe<Scalars['Boolean']>;
  /** The element's status. */
  status?: Maybe<Scalars['String']>;
  /** The date the element was created. */
  dateCreated?: Maybe<Scalars['DateTime']>;
  /** The date the element was last updated. */
  dateUpdated?: Maybe<Scalars['DateTime']>;
  /** The ID of the field that owns the matrix block. */
  fieldId?: Maybe<Scalars['Int']>;
  /** The ID of the element that owns the matrix block. */
  ownerId?: Maybe<Scalars['Int']>;
  /** The ID of the matrix block's type. */
  typeId?: Maybe<Scalars['Int']>;
  /** The handle of the matrix block's type. */
  typeHandle?: Maybe<Scalars['String']>;
  /** The sort order of the matrix block within the owner element field. */
  sortOrder?: Maybe<Scalars['Int']>;
  text?: Maybe<Scalars['String']>;
  image?: Maybe<Array<Maybe<AssetInterface>>>;
  bg?: Maybe<Scalars['String']>;
};


export type Slides_Slide_BlockType_CountArgs = {
  field: Scalars['String'];
};


export type Slides_Slide_BlockTypeImageArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  volumeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  volume?: Maybe<Array<Maybe<Scalars['String']>>>;
  folderId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  filename?: Maybe<Array<Maybe<Scalars['String']>>>;
  kind?: Maybe<Array<Maybe<Scalars['String']>>>;
  height?: Maybe<Array<Maybe<Scalars['String']>>>;
  width?: Maybe<Array<Maybe<Scalars['String']>>>;
  size?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateModified?: Maybe<Scalars['String']>;
  includeSubfolders?: Maybe<Scalars['Boolean']>;
  withTransforms?: Maybe<Array<Maybe<Scalars['String']>>>;
  uploader?: Maybe<Scalars['QueryArgument']>;
};

export type Socials_GlobalSet = ElementInterface & GlobalSetInterface & {
  /** The id of the entity */
  id?: Maybe<Scalars['ID']>;
  /** The uid of the entity */
  uid?: Maybe<Scalars['String']>;
  /** Return a number of related elements for a field. */
  _count?: Maybe<Scalars['Int']>;
  /** The element’s title. */
  title?: Maybe<Scalars['String']>;
  /** The element’s slug. */
  slug?: Maybe<Scalars['String']>;
  /** The element’s URI. */
  uri?: Maybe<Scalars['String']>;
  /** Whether the element is enabled or not. */
  enabled?: Maybe<Scalars['Boolean']>;
  /** Whether the element is archived or not. */
  archived?: Maybe<Scalars['Boolean']>;
  /** The ID of the site the element is associated with. */
  siteId?: Maybe<Scalars['Int']>;
  /** The unique identifier for an element-site relation. */
  siteSettingsId?: Maybe<Scalars['ID']>;
  /** The language of the site element is associated with. */
  language?: Maybe<Scalars['String']>;
  /** The element’s search score, if the `search` parameter was used when querying for the element. */
  searchScore?: Maybe<Scalars['String']>;
  /** Whether the element has been soft-deleted or not. */
  trashed?: Maybe<Scalars['Boolean']>;
  /** The element's status. */
  status?: Maybe<Scalars['String']>;
  /** The date the element was created. */
  dateCreated?: Maybe<Scalars['DateTime']>;
  /** The date the element was last updated. */
  dateUpdated?: Maybe<Scalars['DateTime']>;
  /** The name of the global set. */
  name?: Maybe<Scalars['String']>;
  /** The handle of the global set. */
  handle?: Maybe<Scalars['String']>;
  links?: Maybe<Array<Maybe<Links_MatrixField>>>;
};


export type Socials_GlobalSet_CountArgs = {
  field: Scalars['String'];
};


export type Socials_GlobalSetLinksArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  fieldId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ownerId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type Team_Team_Entry = ElementInterface & EntryInterface & {
  /** The id of the entity */
  id?: Maybe<Scalars['ID']>;
  /** The uid of the entity */
  uid?: Maybe<Scalars['String']>;
  /** Return a number of related elements for a field. */
  _count?: Maybe<Scalars['Int']>;
  /** The element’s title. */
  title?: Maybe<Scalars['String']>;
  /** The element’s slug. */
  slug?: Maybe<Scalars['String']>;
  /** The element’s URI. */
  uri?: Maybe<Scalars['String']>;
  /** Whether the element is enabled or not. */
  enabled?: Maybe<Scalars['Boolean']>;
  /** Whether the element is archived or not. */
  archived?: Maybe<Scalars['Boolean']>;
  /** The ID of the site the element is associated with. */
  siteId?: Maybe<Scalars['Int']>;
  /** The unique identifier for an element-site relation. */
  siteSettingsId?: Maybe<Scalars['ID']>;
  /** The language of the site element is associated with. */
  language?: Maybe<Scalars['String']>;
  /** The element’s search score, if the `search` parameter was used when querying for the element. */
  searchScore?: Maybe<Scalars['String']>;
  /** Whether the element has been soft-deleted or not. */
  trashed?: Maybe<Scalars['Boolean']>;
  /** The element's status. */
  status?: Maybe<Scalars['String']>;
  /** The date the element was created. */
  dateCreated?: Maybe<Scalars['DateTime']>;
  /** The date the element was last updated. */
  dateUpdated?: Maybe<Scalars['DateTime']>;
  /** The element’s left position within its structure. */
  lft?: Maybe<Scalars['Int']>;
  /** The element’s right position within its structure. */
  rgt?: Maybe<Scalars['Int']>;
  /** The element’s level within its structure */
  level?: Maybe<Scalars['Int']>;
  /** The element’s structure’s root ID */
  root?: Maybe<Scalars['Int']>;
  /** The element’s structure ID. */
  structureId?: Maybe<Scalars['Int']>;
  /** Returns whether this is a draft. */
  isDraft?: Maybe<Scalars['Boolean']>;
  /** Returns whether this is a revision. */
  isRevision?: Maybe<Scalars['Boolean']>;
  /** The ID of the draft to return (from the `drafts` table) */
  draftId?: Maybe<Scalars['Int']>;
  /** Returns whether this is an unpublished draft. */
  isUnpublishedDraft?: Maybe<Scalars['Boolean']>;
  /** Returns whether this is an unpublished draft. **This field is deprecated.** `isUnpublishedDraft` should be used instead. */
  isUnsavedDraft?: Maybe<Scalars['Boolean']>;
  /** The name of the draft. */
  draftName?: Maybe<Scalars['String']>;
  /** The notes for the draft. */
  draftNotes?: Maybe<Scalars['String']>;
  /** Returns the entry’s canonical ID. */
  canonicalId?: Maybe<Scalars['Int']>;
  /** Returns the entry’s canonical UUID. */
  canonicalUid?: Maybe<Scalars['String']>;
  /**
   * Returns the entry’s canonical ID.
   * @deprecated this field has been deprecated since Craft 3.7.7. Use `canonicalId` instead.
   */
  sourceId?: Maybe<Scalars['Int']>;
  /**
   * Returns the entry’s canonical UUID.
   * @deprecated this field has been deprecated since Craft 3.7.7. Use `canonicalUid` instead.
   */
  sourceUid?: Maybe<Scalars['String']>;
  /** The ID of the section that contains the entry. */
  sectionId?: Maybe<Scalars['Int']>;
  /** The handle of the section that contains the entry. */
  sectionHandle?: Maybe<Scalars['String']>;
  /** The ID of the entry type that contains the entry. */
  typeId?: Maybe<Scalars['Int']>;
  /** The handle of the entry type that contains the entry. */
  typeHandle?: Maybe<Scalars['String']>;
  /** The entry's post date. */
  postDate?: Maybe<Scalars['DateTime']>;
  /** The expiry date of the entry. */
  expiryDate?: Maybe<Scalars['DateTime']>;
  /** The entry’s children, if the section is a structure. Accepts the same arguments as the `entries` query. */
  children?: Maybe<Array<Maybe<EntryInterface>>>;
  /** The entry’s descendants, if the section is a structure. Accepts the same arguments as the `entries` query. */
  descendants?: Maybe<Array<Maybe<EntryInterface>>>;
  /** The entry’s parent, if the section is a structure. */
  parent?: Maybe<EntryInterface>;
  /** The entry’s ancestors, if the section is a structure. Accepts the same arguments as the `entries` query. */
  ancestors?: Maybe<Array<Maybe<EntryInterface>>>;
  /** The element’s full URL */
  url?: Maybe<Scalars['String']>;
  /** The same element in other locales. */
  localized?: Maybe<Array<Maybe<EntryInterface>>>;
  /** Returns the previous element relative to this one, from a given set of criteria. */
  prev?: Maybe<EntryInterface>;
  /** Returns the next element relative to this one, from a given set of criteria. */
  next?: Maybe<EntryInterface>;
  seo?: Maybe<Array<Maybe<Seo_MatrixField>>>;
  text?: Maybe<Scalars['String']>;
  people?: Maybe<Array<Maybe<EntryInterface>>>;
  textAdditional?: Maybe<Scalars['String']>;
  trustees?: Maybe<Array<Maybe<Trustees_TableRow>>>;
};


export type Team_Team_Entry_CountArgs = {
  field: Scalars['String'];
};


export type Team_Team_EntryChildrenArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Team_Team_EntryDescendantsArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Team_Team_EntryParentArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Team_Team_EntryAncestorsArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Team_Team_EntryLocalizedArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Team_Team_EntryPrevArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Team_Team_EntryNextArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Team_Team_EntrySeoArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  fieldId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ownerId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type Team_Team_EntryPeopleArgs = {
  id?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  uid?: Maybe<Array<Maybe<Scalars['String']>>>;
  site?: Maybe<Array<Maybe<Scalars['String']>>>;
  siteId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  unique?: Maybe<Scalars['Boolean']>;
  preferSites?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  enabledForSite?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
  uri?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  relatedTo?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  relatedToAssets?: Maybe<Array<Maybe<AssetCriteriaInput>>>;
  relatedToEntries?: Maybe<Array<Maybe<EntryCriteriaInput>>>;
  relatedToUsers?: Maybe<Array<Maybe<UserCriteriaInput>>>;
  relatedToCategories?: Maybe<Array<Maybe<CategoryCriteriaInput>>>;
  relatedToTags?: Maybe<Array<Maybe<TagCriteriaInput>>>;
  relatedToAll?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  ref?: Maybe<Array<Maybe<Scalars['String']>>>;
  fixedOrder?: Maybe<Scalars['Boolean']>;
  inReverse?: Maybe<Scalars['Boolean']>;
  dateCreated?: Maybe<Array<Maybe<Scalars['String']>>>;
  dateUpdated?: Maybe<Array<Maybe<Scalars['String']>>>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Scalars['String']>;
  siteSettingsId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  withStructure?: Maybe<Scalars['Boolean']>;
  structureId?: Maybe<Scalars['Int']>;
  level?: Maybe<Scalars['Int']>;
  hasDescendants?: Maybe<Scalars['Boolean']>;
  ancestorOf?: Maybe<Scalars['Int']>;
  ancestorDist?: Maybe<Scalars['Int']>;
  descendantOf?: Maybe<Scalars['Int']>;
  descendantDist?: Maybe<Scalars['Int']>;
  leaves?: Maybe<Scalars['Boolean']>;
  nextSiblingOf?: Maybe<Scalars['Int']>;
  prevSiblingOf?: Maybe<Scalars['Int']>;
  positionedAfter?: Maybe<Scalars['Int']>;
  positionedBefore?: Maybe<Scalars['Int']>;
  interval?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesFeatured?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  newsStoriesLatest?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  image?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  thumbnail?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  color?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textWithLineBreaks?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  text?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  textAdditional?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  historyTitle?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  people?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  trustees?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  programs?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  contactLink?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  phone?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  email?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  editable?: Maybe<Scalars['Boolean']>;
  section?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  typeId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  authorGroup?: Maybe<Array<Maybe<Scalars['String']>>>;
  authorGroupId?: Maybe<Array<Maybe<Scalars['QueryArgument']>>>;
  postDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type Trustees_TableRow = {
  col1?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  col3?: Maybe<Scalars['String']>;
  role?: Maybe<Scalars['String']>;
  col2?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
};

export type ContactDirectoryEntryFragment = { person?: Maybe<string>, phone?: Maybe<string>, title?: Maybe<string>, email?: Maybe<LinkFragment> };

export type CtaFragment = { text?: Maybe<string>, links?: Maybe<Array<Maybe<{ ariaLabel?: Maybe<string>, link?: Maybe<LinkFragment> }>>> };

export type FactsStatsImageBlockFragment = { type?: Maybe<string>, image?: Maybe<Array<Maybe<AssetFragment>>> };

export type FactsStatsRichTextBlockFragment = { text?: Maybe<string>, type?: Maybe<string> };

export type FactsStatsTextWithBackgroundBlockFragment = { text?: Maybe<string>, type?: Maybe<string> };

export type NewsCardFragment = { slug?: Maybe<string>, title?: Maybe<string>, type?: Maybe<string>, image?: Maybe<Array<Maybe<AssetFragment>>>, thumbnail?: Maybe<Array<Maybe<AssetFragment>>> };

export type StoryCardFragment = { slug?: Maybe<string>, title?: Maybe<string>, type?: Maybe<string>, image?: Maybe<Array<Maybe<AssetFragment>>>, thumbnail?: Maybe<Array<Maybe<AssetFragment>>> };

export type PeoplePersonFragment = { slug?: Maybe<string>, education?: Maybe<string>, name?: Maybe<string>, role?: Maybe<string>, image?: Maybe<Array<Maybe<AssetFragment>>> };

export type PillFragment = { bg?: Maybe<string>, description?: Maybe<string>, title?: Maybe<string> };

export type PostNewsFragment = { postDate?: Maybe<any>, title?: Maybe<string>, bg?: Maybe<string>, type?: Maybe<string>, blocks?: Maybe<Array<Maybe<PostNewsImageBlockFragment | PostNewsRichTextBlockFragment>>>, image?: Maybe<Array<Maybe<AssetFragment>>>, seo?: Maybe<Array<Maybe<SeoFragment>>> };

export type PostNewsImageBlockFragment = { type?: Maybe<string>, image?: Maybe<Array<Maybe<AssetFragment>>> };

export type PostNewsRichTextBlockFragment = { text?: Maybe<string>, type?: Maybe<string> };

export type PostStoryFragment = { postDate?: Maybe<any>, title?: Maybe<string>, type?: Maybe<string>, blocks?: Maybe<Array<Maybe<PostStoryRichTextBlockFragment | PostStoryQuoteBlockFragment>>>, image?: Maybe<Array<Maybe<AssetFragment>>>, seo?: Maybe<Array<Maybe<SeoFragment>>> };

export type PostStoryQuoteBlockFragment = { type?: Maybe<string>, quote?: Maybe<Array<Maybe<QuoteFragment>>> };

export type PostStoryRichTextBlockFragment = { text?: Maybe<string>, type?: Maybe<string> };

export type ProgramFragment = { title?: Maybe<string>, description?: Maybe<string>, subtitle?: Maybe<string>, contactLink?: Maybe<LinkFragment>, image?: Maybe<Array<Maybe<AssetFragment>>> };

export type QuoteFragment = { caption?: Maybe<string>, quote?: Maybe<string>, image?: Maybe<Array<Maybe<AssetFragment>>> };

export type SeoFragment = { description?: Maybe<string>, title?: Maybe<string>, image?: Maybe<Array<Maybe<AssetFragment>>> };

export type SlideFragment = { bg?: Maybe<string>, text?: Maybe<string>, image?: Maybe<Array<Maybe<AssetFragment>>> };

export type SliderVerticalSlideFragment = { text?: Maybe<string>, title?: Maybe<string> };

export type TextMessageFragment = { caption?: Maybe<string>, subtitle?: Maybe<string>, text?: Maybe<string>, title?: Maybe<string> };

export type TrusteesTrusteeFragment = { description?: Maybe<string>, name?: Maybe<string>, role?: Maybe<string> };

export type ContactQueryVariables = Exact<{ [key: string]: never; }>;


export type ContactQuery = { contact?: Maybe<{ directoryTitle?: Maybe<string>, title?: Maybe<string>, directory?: Maybe<Array<Maybe<ContactDirectoryEntryFragment>>>, email?: Maybe<LinkFragment>, phone?: Maybe<LinkFragment>, seo?: Maybe<Array<Maybe<SeoFragment>>> }> };

export type FactsStatsQueryVariables = Exact<{ [key: string]: never; }>;


export type FactsStatsQuery = { facts?: Maybe<{ title?: Maybe<string>, blocks?: Maybe<Array<Maybe<FactsStatsImageBlockFragment | FactsStatsTextWithBackgroundBlockFragment | FactsStatsRichTextBlockFragment>>>, heroImage?: Maybe<Array<Maybe<AssetFragment>>>, seo?: Maybe<Array<Maybe<SeoFragment>>> }> };

export type AssetFragment = { kind?: Maybe<string>, alt?: Maybe<string>, h?: Maybe<number>, placeholder?: Maybe<string>, src?: Maybe<string>, w?: Maybe<number> };

export type LinkFragment = { text?: Maybe<string>, type?: Maybe<string>, url?: Maybe<string> };

export type GlobalsQueryVariables = Exact<{ [key: string]: never; }>;


export type GlobalsQuery = { footer?: Maybe<{ address?: Maybe<string>, cta?: Maybe<Array<Maybe<CtaFragment>>> }>, socials?: Maybe<{ links?: Maybe<Array<Maybe<{ link?: Maybe<{ text?: Maybe<string>, url?: Maybe<string> }> }>>> }> };

export type HomeQueryVariables = Exact<{ [key: string]: never; }>;


export type HomeQuery = { home?: Maybe<{ interval?: Maybe<any>, cta?: Maybe<Array<Maybe<CtaFragment>>>, newsStoriesFeatured?: Maybe<Array<Maybe<NewsCardFragment | StoryCardFragment>>>, newsStoriesLatest?: Maybe<Array<Maybe<NewsCardFragment | StoryCardFragment>>>, slides?: Maybe<Array<Maybe<SlideFragment>>>, seo?: Maybe<Array<Maybe<SeoFragment>>> }> };

export type JoinQueryVariables = Exact<{ [key: string]: never; }>;


export type JoinQuery = { join?: Maybe<{ description?: Maybe<string>, descriptionBg?: Maybe<string>, heroText?: Maybe<string>, text?: Maybe<string>, cta?: Maybe<Array<Maybe<CtaFragment>>>, image?: Maybe<Array<Maybe<AssetFragment>>>, quote?: Maybe<Array<Maybe<QuoteFragment>>>, seo?: Maybe<Array<Maybe<SeoFragment>>> }> };

export type MissionVisionQueryVariables = Exact<{ [key: string]: never; }>;


export type MissionVisionQuery = { mission?: Maybe<{ historyTitle?: Maybe<string>, text?: Maybe<string>, teamEffortTitle?: Maybe<string>, teamEffortText?: Maybe<string>, hero?: Maybe<Array<Maybe<{ text?: Maybe<string>, image?: Maybe<Array<Maybe<AssetFragment>>> }>>>, message?: Maybe<Array<Maybe<TextMessageFragment>>>, pills?: Maybe<Array<Maybe<PillFragment>>>, quote?: Maybe<Array<Maybe<QuoteFragment>>>, seo?: Maybe<Array<Maybe<SeoFragment>>>, sliderVertical?: Maybe<Array<Maybe<SliderVerticalSlideFragment>>> }> };

export type NewsStoriesQueryVariables = Exact<{ [key: string]: never; }>;


export type NewsStoriesQuery = { news?: Maybe<{ seo?: Maybe<Array<Maybe<SeoFragment>>> }> };

export type PeopleSlugsQueryVariables = Exact<{ [key: string]: never; }>;


export type PeopleSlugsQuery = { people?: Maybe<Array<Maybe<{ slug?: Maybe<string> }>>> };

export type PersonQueryVariables = Exact<{
  slug?: Maybe<Array<Scalars['String']> | Scalars['String']>;
}>;


export type PersonQuery = { person?: Maybe<{ description?: Maybe<string>, education?: Maybe<string>, name?: Maybe<string>, role?: Maybe<string>, image?: Maybe<Array<Maybe<AssetFragment>>>, seo?: Maybe<Array<Maybe<SeoFragment>>> }> };

export type PostQueryVariables = Exact<{
  slug?: Maybe<Array<Scalars['String']> | Scalars['String']>;
}>;


export type PostQuery = { post?: Maybe<PostNewsFragment | PostStoryFragment> };

export type PostsQueryVariables = Exact<{
  offset?: Scalars['Int'];
}>;


export type PostsQuery = { amount: number, posts?: Maybe<Array<Maybe<NewsCardFragment | StoryCardFragment>>> };

export type PostsSlugsQueryVariables = Exact<{ [key: string]: never; }>;


export type PostsSlugsQuery = { posts?: Maybe<Array<Maybe<{ slug?: Maybe<string> } | { slug?: Maybe<string> }>>> };

export type ServiceQueryVariables = Exact<{
  slug?: Maybe<Array<Scalars['String']> | Scalars['String']>;
}>;


export type ServiceQuery = { service?: Maybe<{ color?: Maybe<string>, title?: Maybe<string>, description?: Maybe<string>, image?: Maybe<Array<Maybe<AssetFragment>>>, programs?: Maybe<Array<Maybe<{ title?: Maybe<string>, description?: Maybe<string>, subtitle?: Maybe<string>, contactLink?: Maybe<LinkFragment>, image?: Maybe<Array<Maybe<AssetFragment>>> }>>>, seo?: Maybe<Array<Maybe<SeoFragment>>> }> };

export type ServicesSlugsQueryVariables = Exact<{ [key: string]: never; }>;


export type ServicesSlugsQuery = { services?: Maybe<Array<Maybe<{ slug?: Maybe<string> }>>> };

export type TeamQueryVariables = Exact<{ [key: string]: never; }>;


export type TeamQuery = { team?: Maybe<{ teamTitle?: Maybe<string>, trusteesTitle?: Maybe<string>, people?: Maybe<Array<Maybe<PeoplePersonFragment>>>, seo?: Maybe<Array<Maybe<SeoFragment>>>, trustees?: Maybe<Array<Maybe<TrusteesTrusteeFragment>>> }> };
